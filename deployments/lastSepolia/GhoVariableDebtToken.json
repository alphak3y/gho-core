{
  "address": "0xe787f1cC09B2B09c6cD75DaB3615694D76C96f66",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "aToken",
          "type": "address"
        }
      ],
      "name": "ATokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromUser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toUser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BorrowAllowanceDelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDiscountPercent",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newDiscountPercent",
          "type": "uint256"
        }
      ],
      "name": "DiscountPercentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldDiscountRateStrategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDiscountRateStrategy",
          "type": "address"
        }
      ],
      "name": "DiscountRateStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldDiscountToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDiscountToken",
          "type": "address"
        }
      ],
      "name": "DiscountTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "incentivesController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "debtTokenDecimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "debtTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "debtTokenSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEBT_TOKEN_REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATION_WITH_SIG_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_REVISION",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNDERLYING_ASSET_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toUser",
          "type": "address"
        }
      ],
      "name": "borrowAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseBalanceFromInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegationWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalanceFromInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDiscountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDiscountRateStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDiscountToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIncentivesController",
      "outputs": [
        {
          "internalType": "contract IAaveIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPreviousIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getScaledUserBalanceAndSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "initializingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "contract IAaveIncentivesController",
          "name": "incentivesController",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "debtTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "debtTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "debtTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "rebalanceUserDiscountPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "scaledBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scaledTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ghoAToken",
          "type": "address"
        }
      ],
      "name": "setAToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAaveIncentivesController",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "setIncentivesController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "senderDiscountTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "recipientDiscountTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateDiscountDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDiscountRateStrategy",
          "type": "address"
        }
      ],
      "name": "updateDiscountRateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDiscountToken",
          "type": "address"
        }
      ],
      "name": "updateDiscountToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a187b66505ca59b40d720b5d969d1694938ae77d27bb4c96d9e19a50befacdc",
  "receipt": {
    "to": null,
    "from": "0xE0157B2E81506f7710e62b331eb113B232e89efA",
    "contractAddress": "0xe787f1cC09B2B09c6cD75DaB3615694D76C96f66",
    "transactionIndex": 1,
    "gasUsed": "2618089",
    "logsBloom": "0x
    "blockHash": "0x3781bc876593b8fc3c4c19934de145a7a34a14b35cc1cbeda91c8345a3d37ad7",
    "transactionHash": "0x0a187b66505ca59b40d720b5d969d1694938ae77d27bb4c96d9e19a50befacdc",
    "logs": [],
    "blockNumber": 281759,
    "cumulativeGasUsed": "2661955",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3e9b7D063f0bC642207044360aE91F05F398B793"
  ],
  "numDeployments": 1,
  "solcInputHash": "2b6fe4af59ecc015f72062d04df7b7d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"}],\"name\":\"ATokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDiscountPercent\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDiscountPercent\",\"type\":\"uint256\"}],\"name\":\"DiscountPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDiscountRateStrategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDiscountRateStrategy\",\"type\":\"address\"}],\"name\":\"DiscountRateStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDiscountToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDiscountToken\",\"type\":\"address\"}],\"name\":\"DiscountTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"debtTokenDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_WITH_SIG_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseBalanceFromInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegationWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalanceFromInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDiscountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscountRateStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscountToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesController\",\"outputs\":[{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPreviousIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"initializingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"debtTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rebalanceUserDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ghoAToken\",\"type\":\"address\"}],\"name\":\"setAToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setIncentivesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderDiscountTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipientDiscountTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateDiscountDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDiscountRateStrategy\",\"type\":\"address\"}],\"name\":\"updateDiscountRateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDiscountToken\",\"type\":\"address\"}],\"name\":\"updateDiscountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"details\":\"Transfer and approve functionalities are disabled since its a non-transferable token\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Return cached value if chainId matches cache, otherwise recomputes separator\",\"returns\":{\"_0\":\"The domain separator of the token at current chain\"}},\"UNDERLYING_ASSET_ADDRESS()\":{\"returns\":{\"_0\":\"The address of the underlying asset\"}},\"approveDelegation(address,uint256)\":{\"params\":{\"amount\":\"The maximum amount being delegated.\",\"delegatee\":\"The address receiving the delegated borrowing power\"}},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"borrowAllowance(address,address)\":{\"params\":{\"fromUser\":\"The user to giving allowance\",\"toUser\":\"The user to give allowance to\"},\"returns\":{\"_0\":\"The current allowance of `toUser`\"}},\"burn(address,uint256,uint256)\":{\"details\":\"In some instances, a burn transaction will emit a mint event if the amount to burn is less than the interest that the user accrued\",\"params\":{\"amount\":\"The amount getting burned\",\"from\":\"The address from which the debt will be burned\",\"index\":\"The variable debt index of the reserve\"},\"returns\":{\"_0\":\"The scaled total debt of the reserve\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"pool\":\"The address of the Pool contract\"}},\"decreaseBalanceFromInterest(address,uint256)\":{\"details\":\"Decrease the amount of interests accumulated by the user\",\"params\":{\"amount\":\"The value to be decrease\",\"user\":\"The address of the user\"}},\"delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp, type(uint256).max for max deadline\",\"delegatee\":\"The delegatee that can use the credit\",\"delegator\":\"The delegator of the credit\",\"r\":\"The R signature param\",\"s\":\"The S signature param\",\"v\":\"The V signature param\",\"value\":\"The amount to be delegated\"}},\"getAToken()\":{\"returns\":{\"_0\":\"The address of the GhoAToken contract\"}},\"getDiscountPercent(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The discount percent (expressed in bps)\"}},\"getDiscountRateStrategy()\":{\"returns\":{\"_0\":\"The address of DiscountRateStrategy contract\"}},\"getDiscountToken()\":{\"returns\":{\"_0\":\"address The address of DiscountToken\"}},\"getIncentivesController()\":{\"returns\":{\"_0\":\"The address of the Incentives Controller\"}},\"getPreviousIndex(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The last index interest was accrued to the user's balance, expressed in ray\"}},\"getScaledUserBalanceAndSupply(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The scaled balance of the user\",\"_1\":\"The scaled total supply\"}},\"initialize(address,address,address,uint8,string,string,bytes)\":{\"params\":{\"debtTokenDecimals\":\"The decimals of the debtToken, same as the underlying asset's\",\"debtTokenName\":\"The name of the token\",\"debtTokenSymbol\":\"The symbol of the token\",\"incentivesController\":\"The smart contract managing potential incentives distribution\",\"params\":\"A set of encoded parameters for additional initialization\",\"pool\":\"The pool contract that is initializing this contract\",\"underlyingAsset\":\"The address of the underlying asset of this aToken (E.g. WETH for aWETH)\"}},\"mint(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of debt being minted\",\"index\":\"The variable debt index of the reserve\",\"onBehalfOf\":\"The address receiving the debt tokens\",\"user\":\"The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise\"},\"returns\":{\"_0\":\"True if the previous balance of the user is 0, false otherwise\",\"_1\":\"The scaled total debt of the reserve\"}},\"nonces(address)\":{\"params\":{\"owner\":\"The address for which the nonce is being returned\"},\"returns\":{\"_0\":\"The nonce value for the input address`\"}},\"rebalanceUserDiscountPercent(address)\":{\"params\":{\"user\":\"The address of the user\"}},\"scaledBalanceOf(address)\":{\"details\":\"The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index at the moment of the update\",\"params\":{\"user\":\"The user whose balance is calculated\"},\"returns\":{\"_0\":\"The scaled balance of the user\"}},\"scaledTotalSupply()\":{\"returns\":{\"_0\":\"The scaled total supply\"}},\"setAToken(address)\":{\"params\":{\"ghoAToken\":\"The address of the GhoAToken contract\"}},\"setIncentivesController(address)\":{\"params\":{\"controller\":\"the new Incentives controller\"}},\"totalSupply()\":{\"details\":\"It does not account for active discounts of the users. The discount is deducted from the user's debt at repayment / liquidation time, so this function does always return a greater or equal value than the actual total supply.\",\"returns\":{\"_0\":\"The amount of tokens in existence (without accounting for active discounts on debt)\"}},\"transfer(address,uint256)\":{\"details\":\"Being non transferrable, the debt token does not implement any of the standard ERC20 functions for transfer and allowance.\"},\"updateDiscountDistribution(address,address,uint256,uint256,uint256)\":{\"details\":\"To be executed before the token transfer happens\",\"params\":{\"amount\":\"The amount of discount token being transferred\",\"recipient\":\"The address of recipient\",\"recipientDiscountTokenBalance\":\"The recipient discount token balance\",\"sender\":\"The address of sender\",\"senderDiscountTokenBalance\":\"The sender discount token balance\"}},\"updateDiscountRateStrategy(address)\":{\"params\":{\"newDiscountRateStrategy\":\"The address of DiscountRateStrategy contract\"}},\"updateDiscountToken(address)\":{\"params\":{\"newDiscountToken\":\"The address of the DiscountToken contract\"}}},\"title\":\"GhoVariableDebtToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Get the domain separator for the token\"},\"UNDERLYING_ASSET_ADDRESS()\":{\"notice\":\"Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\"},\"approveDelegation(address,uint256)\":{\"notice\":\"Delegates borrowing power to a user on the specific debt token. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)\"},\"borrowAllowance(address,address)\":{\"notice\":\"Returns the borrow allowance of the user\"},\"burn(address,uint256,uint256)\":{\"notice\":\"Burns user variable debt\"},\"delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates borrowing power to a user on the specific debt token via ERC712 signature\"},\"getAToken()\":{\"notice\":\"Returns the address of the GHO AToken\"},\"getDiscountPercent(address)\":{\"notice\":\"Returns the discount percent being applied to the debt interest of the user\"},\"getDiscountRateStrategy()\":{\"notice\":\"Returns the address of the Discount Rate Strategy\"},\"getDiscountToken()\":{\"notice\":\"Returns the address of the Discount Token\"},\"getIncentivesController()\":{\"notice\":\"Returns the address of the Incentives Controller contract\"},\"getPreviousIndex(address)\":{\"notice\":\"Returns last index interest was accrued to the user's balance\"},\"getScaledUserBalanceAndSupply(address)\":{\"notice\":\"Returns the scaled balance of the user and the scaled total supply.\"},\"initialize(address,address,address,uint8,string,string,bytes)\":{\"notice\":\"Initializes the debt token.\"},\"mint(address,address,uint256,uint256)\":{\"notice\":\"Mints debt token to the `onBehalfOf` address\"},\"nonces(address)\":{\"notice\":\"Returns the nonce value for address specified as parameter\"},\"rebalanceUserDiscountPercent(address)\":{\"notice\":\"Rebalances the discount percent of a user\"},\"scaledBalanceOf(address)\":{\"notice\":\"Returns the scaled balance of the user.\"},\"scaledTotalSupply()\":{\"notice\":\"Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\"},\"setAToken(address)\":{\"notice\":\"Sets a reference to the GHO AToken\"},\"setIncentivesController(address)\":{\"notice\":\"Sets a new Incentives Controller\"},\"totalSupply()\":{\"notice\":\"Returns the amount of tokens in existence.\"},\"updateDiscountDistribution(address,address,uint256,uint256,uint256)\":{\"notice\":\"Updates the discount percents of the users when a discount token transfer occurs\"},\"updateDiscountRateStrategy(address)\":{\"notice\":\"Updates the Discount Rate Strategy\"},\"updateDiscountToken(address)\":{\"notice\":\"Updates the Discount Token\"}},\"notice\":\"Implements a variable debt token to track the borrowing positions of users at variable rate mode for GHO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol\":\"GhoVariableDebtToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return payable(msg.sender);\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x0d984665e4f3dd200c605a83b7caae057dd96136c038fcdd271fd85757dc3d8f\",\"license\":\"MIT\"},\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6e56fb472b39561ef68a43d8ec1845171b211635746cfc2c17cf4d3a687fe85d\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x04545d0c4e4e475ad961ac4f7d0a42939ddf0e5e00125b164a01f84f601866ec\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n  /**\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint224).\\n   *\\n   * Counterpart to Solidity's `uint224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    return uint224(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint128).\\n   *\\n   * Counterpart to Solidity's `uint128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   */\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    return uint128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint96).\\n   *\\n   * Counterpart to Solidity's `uint96` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 96 bits\\n   */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    return uint96(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint64).\\n   *\\n   * Counterpart to Solidity's `uint64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   */\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    return uint64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint32).\\n   *\\n   * Counterpart to Solidity's `uint32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   */\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    return uint32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint16).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   */\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    return uint16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint8).\\n   *\\n   * Counterpart to Solidity's `uint8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   */\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    return uint8(value);\\n  }\\n\\n  /**\\n   * @dev Converts a signed int256 into an unsigned uint256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be greater than or equal to 0.\\n   */\\n  function toUint256(int256 value) internal pure returns (uint256) {\\n    require(value >= 0, 'SafeCast: value must be positive');\\n    return uint256(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int128 from int256, reverting on\\n   * overflow (when the input is less than smallest int128 or\\n   * greater than largest int128).\\n   *\\n   * Counterpart to Solidity's `int128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt128(int256 value) internal pure returns (int128) {\\n    require(\\n      value >= type(int128).min && value <= type(int128).max,\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n    );\\n    return int128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int64 from int256, reverting on\\n   * overflow (when the input is less than smallest int64 or\\n   * greater than largest int64).\\n   *\\n   * Counterpart to Solidity's `int64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt64(int256 value) internal pure returns (int64) {\\n    require(\\n      value >= type(int64).min && value <= type(int64).max,\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n    );\\n    return int64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int32 from int256, reverting on\\n   * overflow (when the input is less than smallest int32 or\\n   * greater than largest int32).\\n   *\\n   * Counterpart to Solidity's `int32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt32(int256 value) internal pure returns (int32) {\\n    require(\\n      value >= type(int32).min && value <= type(int32).max,\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n    );\\n    return int32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int16 from int256, reverting on\\n   * overflow (when the input is less than smallest int16 or\\n   * greater than largest int16).\\n   *\\n   * Counterpart to Solidity's `int16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt16(int256 value) internal pure returns (int16) {\\n    require(\\n      value >= type(int16).min && value <= type(int16).max,\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n    );\\n    return int16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int8 from int256, reverting on\\n   * overflow (when the input is less than smallest int8 or\\n   * greater than largest int8).\\n   *\\n   * Counterpart to Solidity's `int8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt8(int256 value) internal pure returns (int8) {\\n    require(\\n      value >= type(int8).min && value <= type(int8).max,\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n    );\\n    return int8(value);\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned uint256 into a signed int256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be less than or equal to maxInt256.\\n   */\\n  function toInt256(uint256 value) internal pure returns (int256) {\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n    return int256(value);\\n  }\\n}\\n\",\"keccak256\":\"0x27008eb94293cd55b7e79c167217f218a775a9962c3cd9672e07e77aa0de28f5\",\"license\":\"MIT\"},\"@aave/core-v3/contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IACLManager\\n * @author Aave\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IACLManager {\\n  /**\\n   * @notice Returns the contract address of the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the FlashBorrower role\\n   * @return The id of the FlashBorrower role\\n   */\\n  function FLASH_BORROWER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the Bridge role\\n   * @return The id of the Bridge role\\n   */\\n  function BRIDGE_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the AssetListingAdmin role\\n   * @return The id of the AssetListingAdmin role\\n   */\\n  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Set the role as admin of a specific role.\\n   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n   * @param role The role to be managed by the admin role\\n   * @param adminRole The admin role\\n   */\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as FlashBorrower\\n   * @param borrower The address of the new FlashBorrower\\n   */\\n  function addFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Removes an address as FlashBorrower\\n   * @param borrower The address of the FlashBorrower to remove\\n   */\\n  function removeFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Returns true if the address is FlashBorrower, false otherwise\\n   * @param borrower The address to check\\n   * @return True if the given address is FlashBorrower, false otherwise\\n   */\\n  function isFlashBorrower(address borrower) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as Bridge\\n   * @param bridge The address of the new Bridge\\n   */\\n  function addBridge(address bridge) external;\\n\\n  /**\\n   * @notice Removes an address as Bridge\\n   * @param bridge The address of the bridge to remove\\n   */\\n  function removeBridge(address bridge) external;\\n\\n  /**\\n   * @notice Returns true if the address is Bridge, false otherwise\\n   * @param bridge The address to check\\n   * @return True if the given address is Bridge, false otherwise\\n   */\\n  function isBridge(address bridge) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as AssetListingAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as AssetListingAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is AssetListingAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is AssetListingAdmin, false otherwise\\n   */\\n  function isAssetListingAdmin(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe39a407a074d8ac950deb7d1d855b39d53e35a5a441a7074c3d26cddef10406b\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\n   * @param user The address of the user whose asset balance has changed\\n   * @param totalSupply The total supply of the asset prior to user balance change\\n   * @param userBalance The previous user balance prior to balance change\\n   */\\n  function handleAction(\\n    address user,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external;\\n}\\n\",\"keccak256\":\"0xfebb2258ed0f33f66ede2dc6f452adbfe9f1e0115c1ae856b65bf518ab142018\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/ICreditDelegationToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ICreditDelegationToken\\n * @author Aave\\n * @notice Defines the basic interface for a token supporting credit delegation.\\n */\\ninterface ICreditDelegationToken {\\n  /**\\n   * @dev Emitted on `approveDelegation` and `borrowAllowance\\n   * @param fromUser The address of the delegator\\n   * @param toUser The address of the delegatee\\n   * @param asset The address of the delegated asset\\n   * @param amount The amount being delegated\\n   */\\n  event BorrowAllowanceDelegated(\\n    address indexed fromUser,\\n    address indexed toUser,\\n    address indexed asset,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @notice Delegates borrowing power to a user on the specific debt token.\\n   * Delegation will still respect the liquidation constraints (even if delegated, a\\n   * delegatee cannot force a delegator HF to go below 1)\\n   * @param delegatee The address receiving the delegated borrowing power\\n   * @param amount The maximum amount being delegated.\\n   */\\n  function approveDelegation(address delegatee, uint256 amount) external;\\n\\n  /**\\n   * @notice Returns the borrow allowance of the user\\n   * @param fromUser The user to giving allowance\\n   * @param toUser The user to give allowance to\\n   * @return The current allowance of `toUser`\\n   */\\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\n\\n  /**\\n   * @notice Delegates borrowing power to a user on the specific debt token via ERC712 signature\\n   * @param delegator The delegator of the credit\\n   * @param delegatee The delegatee that can use the credit\\n   * @param value The amount to be delegated\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v The V signature param\\n   * @param s The S signature param\\n   * @param r The R signature param\\n   */\\n  function delegationWithSig(\\n    address delegator,\\n    address delegatee,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\",\"keccak256\":\"0xab2789bbbf54af9609fbd7fa93595a514866728b3096ede6b69952f98290c997\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableDebtToken\\n * @author Aave\\n * @notice Interface for the initialize function common between debt tokens\\n */\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param debtTokenDecimals The decimals of the debt token\\n   * @param debtTokenName The name of the debt token\\n   * @param debtTokenSymbol The symbol of the debt token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address incentivesController,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the debt token.\\n   * @param pool The pool contract that is initializing this contract\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x53476b4161009b310cc8ef32d54f7e6b6508a1902f4dda4ac1b3f50ec4b0dc8a\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0x96c0b6559a9f4b11a4ce0f825007d0b1a50340551714d0d79c6c1c5854b43f16\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x33d4308d9407b4ee2297fc4ba5acce1a96a6c658189e2778a4f6b90e032fb3b5\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted tokens\\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after the burn action\\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n   * @param from The address from which the tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   */\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   */\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   */\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   */\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x72b3ea433cd3386f369f1643a154bf233ec60c02acd02c32088a97556207d2e4\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n */\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @notice Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return True if the previous balance of the user is 0, false otherwise\\n   * @return The scaled total debt of the reserve\\n   */\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool, uint256);\\n\\n  /**\\n   * @notice Burns user variable debt\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the debt will be burned\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   * @return The scaled total debt of the reserve\\n   */\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\\n   * @return The address of the underlying asset\\n   */\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71f2e53a4795f975a281ee9f580c91e09a965be95efda5a584598b832d2337b2\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title VersionedInitializable\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n * @notice Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * @dev WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 private lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      lastInitializedRevision = revision;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the revision number of the contract\\n   * @dev Needs to be defined in the inherited class as a constant.\\n   * @return The revision number\\n   */\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /**\\n   * @notice Returns true if and only if the function is running in the constructor\\n   * @return True if the function is running in the constructor\\n   */\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x76ae24e03ef6558eff491b2f9d87198dbdc8fcc52981f5a546319e0a16003a8c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\n}\\n\",\"keccak256\":\"0x47cc213daf0f98625ed45e5c42e58fcb1aa9bddf1461fc391e4bee7a39092263\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary PercentageMath {\\n  // Maximum percentage factor (100.00%)\\n  uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n  // Half percentage factor (50.00%)\\n  uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n  /**\\n   * @notice Executes a percentage multiplication\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return result value percentmul percentage\\n   */\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n    // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n    assembly {\\n      if iszero(\\n        or(\\n          iszero(percentage),\\n          iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)))\\n        )\\n      ) {\\n        revert(0, 0)\\n      }\\n\\n      result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\n    }\\n  }\\n\\n  /**\\n   * @notice Executes a percentage division\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return result value percentdiv percentage\\n   */\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n    // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n    assembly {\\n      if or(\\n        iszero(percentage),\\n        iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))\\n      ) {\\n        revert(0, 0)\\n      }\\n\\n      result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6a7dcf18e1af47b69c8dd58093b0134e3689bf719ba63eae485d8f9dfc10cac7\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a*b, in wad\\n   */\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a/b, in wad\\n   */\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raymul b\\n   */\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raydiv b\\n   */\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\n   */\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n    assembly {\\n      b := div(a, WAD_RAY_RATIO)\\n      let remainder := mod(a, WAD_RAY_RATIO)\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n        b := add(b, 1)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @return b = a converted in ray\\n   */\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\n    assembly {\\n      b := mul(a, WAD_RAY_RATIO)\\n\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n        revert(0, 0)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x618fe1876e322a10269e4a96e61e516bbbec883cb79e20b508f8010027178f07\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xe5c6db4edc44768b334b6f9271e1ae21c81d6ab0692c2740cce0c56c4ac433dd\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/tokenization/base/DebtTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Context} from '../../../dependencies/openzeppelin/contracts/Context.sol';\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\nimport {VersionedInitializable} from '../../libraries/aave-upgradeability/VersionedInitializable.sol';\\nimport {ICreditDelegationToken} from '../../../interfaces/ICreditDelegationToken.sol';\\nimport {EIP712Base} from './EIP712Base.sol';\\n\\n/**\\n * @title DebtTokenBase\\n * @author Aave\\n * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken\\n */\\nabstract contract DebtTokenBase is\\n  VersionedInitializable,\\n  EIP712Base,\\n  Context,\\n  ICreditDelegationToken\\n{\\n  // Map of borrow allowances (delegator => delegatee => borrowAllowanceAmount)\\n  mapping(address => mapping(address => uint256)) internal _borrowAllowances;\\n\\n  // Credit Delegation Typehash\\n  bytes32 public constant DELEGATION_WITH_SIG_TYPEHASH =\\n    keccak256('DelegationWithSig(address delegatee,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  address internal _underlyingAsset;\\n\\n  /**\\n   * @dev Constructor.\\n   */\\n  constructor() EIP712Base() {\\n    // Intentionally left blank\\n  }\\n\\n  /// @inheritdoc ICreditDelegationToken\\n  function approveDelegation(address delegatee, uint256 amount) external override {\\n    _approveDelegation(_msgSender(), delegatee, amount);\\n  }\\n\\n  /// @inheritdoc ICreditDelegationToken\\n  function delegationWithSig(\\n    address delegator,\\n    address delegatee,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(delegator != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);\\n    uint256 currentValidNonce = _nonces[delegator];\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR(),\\n        keccak256(\\n          abi.encode(DELEGATION_WITH_SIG_TYPEHASH, delegatee, value, currentValidNonce, deadline)\\n        )\\n      )\\n    );\\n    require(delegator == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);\\n    _nonces[delegator] = currentValidNonce + 1;\\n    _approveDelegation(delegator, delegatee, value);\\n  }\\n\\n  /// @inheritdoc ICreditDelegationToken\\n  function borrowAllowance(address fromUser, address toUser)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _borrowAllowances[fromUser][toUser];\\n  }\\n\\n  /**\\n   * @notice Updates the borrow allowance of a user on the specific debt token.\\n   * @param delegator The address delegating the borrowing power\\n   * @param delegatee The address receiving the delegated borrowing power\\n   * @param amount The allowance amount being delegated.\\n   */\\n  function _approveDelegation(\\n    address delegator,\\n    address delegatee,\\n    uint256 amount\\n  ) internal {\\n    _borrowAllowances[delegator][delegatee] = amount;\\n    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, amount);\\n  }\\n\\n  /**\\n   * @notice Decreases the borrow allowance of a user on the specific debt token.\\n   * @param delegator The address delegating the borrowing power\\n   * @param delegatee The address receiving the delegated borrowing power\\n   * @param amount The amount to subtract from the current allowance\\n   */\\n  function _decreaseBorrowAllowance(\\n    address delegator,\\n    address delegatee,\\n    uint256 amount\\n  ) internal {\\n    uint256 newAllowance = _borrowAllowances[delegator][delegatee] - amount;\\n\\n    _borrowAllowances[delegator][delegatee] = newAllowance;\\n\\n    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, newAllowance);\\n  }\\n}\\n\",\"keccak256\":\"0x206f9b7a90b3371202ae671a4add6632dcdcc6d0af85f5ff825a35c2e4b5133a\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/tokenization/base/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title EIP712Base\\n * @author Aave\\n * @notice Base contract implementation of EIP712.\\n */\\nabstract contract EIP712Base {\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n\\n  // Map of address nonces (address => nonce)\\n  mapping(address => uint256) internal _nonces;\\n\\n  bytes32 internal _domainSeparator;\\n  uint256 internal immutable _chainId;\\n\\n  /**\\n   * @dev Constructor.\\n   */\\n  constructor() {\\n    _chainId = block.chainid;\\n  }\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n    if (block.chainid == _chainId) {\\n      return _domainSeparator;\\n    }\\n    return _calculateDomainSeparator();\\n  }\\n\\n  /**\\n   * @notice Returns the nonce value for address specified as parameter\\n   * @param owner The address for which the nonce is being returned\\n   * @return The nonce value for the input address`\\n   */\\n  function nonces(address owner) public view virtual returns (uint256) {\\n    return _nonces[owner];\\n  }\\n\\n  /**\\n   * @notice Compute the current domain separator\\n   * @return The domain separator for the token\\n   */\\n  function _calculateDomainSeparator() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          EIP712_DOMAIN,\\n          keccak256(bytes(_EIP712BaseId())),\\n          keccak256(EIP712_REVISION),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the user readable name of signing domain (e.g. token name)\\n   * @return The name of the signing domain\\n   */\\n  function _EIP712BaseId() internal view virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x4eb4f8632f27cf69dd04d98fe6e1f213b43b041d821e5bff2bfc95d549b42f94\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/tokenization/base/IncentivizedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Context} from '../../../dependencies/openzeppelin/contracts/Context.sol';\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IERC20Detailed} from '../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {WadRayMath} from '../../libraries/math/WadRayMath.sol';\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\nimport {IAaveIncentivesController} from '../../../interfaces/IAaveIncentivesController.sol';\\nimport {IPoolAddressesProvider} from '../../../interfaces/IPoolAddressesProvider.sol';\\nimport {IPool} from '../../../interfaces/IPool.sol';\\nimport {IACLManager} from '../../../interfaces/IACLManager.sol';\\n\\n/**\\n * @title IncentivizedERC20\\n * @author Aave, inspired by the Openzeppelin ERC20 implementation\\n * @notice Basic ERC20 implementation\\n */\\nabstract contract IncentivizedERC20 is Context, IERC20Detailed {\\n  using WadRayMath for uint256;\\n  using SafeCast for uint256;\\n\\n  /**\\n   * @dev Only pool admin can call functions marked by this modifier.\\n   */\\n  modifier onlyPoolAdmin() {\\n    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());\\n    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Only pool can call functions marked by this modifier.\\n   */\\n  modifier onlyPool() {\\n    require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);\\n    _;\\n  }\\n\\n  /**\\n   * @dev UserState - additionalData is a flexible field.\\n   * ATokens and VariableDebtTokens use this field store the index of the\\n   * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use\\n   * this field to store the user's stable rate.\\n   */\\n  struct UserState {\\n    uint128 balance;\\n    uint128 additionalData;\\n  }\\n  // Map of users address and their state data (userAddress => userStateData)\\n  mapping(address => UserState) internal _userState;\\n\\n  // Map of allowances (delegator => delegatee => allowanceAmount)\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 internal _totalSupply;\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n  IAaveIncentivesController internal _incentivesController;\\n  IPoolAddressesProvider internal immutable _addressesProvider;\\n  IPool public immutable POOL;\\n\\n  /**\\n   * @dev Constructor.\\n   * @param pool The reference to the main Pool contract\\n   * @param name The name of the token\\n   * @param symbol The symbol of the token\\n   * @param decimals The number of decimals of the token\\n   */\\n  constructor(\\n    IPool pool,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) {\\n    _addressesProvider = pool.ADDRESSES_PROVIDER();\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = decimals;\\n    POOL = pool;\\n  }\\n\\n  /// @inheritdoc IERC20Detailed\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /// @inheritdoc IERC20Detailed\\n  function symbol() external view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /// @inheritdoc IERC20Detailed\\n  function decimals() external view override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _userState[account].balance;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the Incentives Controller contract\\n   * @return The address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view virtual returns (IAaveIncentivesController) {\\n    return _incentivesController;\\n  }\\n\\n  /**\\n   * @notice Sets a new Incentives Controller\\n   * @param controller the new Incentives controller\\n   */\\n  function setIncentivesController(IAaveIncentivesController controller) external onlyPoolAdmin {\\n    _incentivesController = controller;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n    uint128 castAmount = amount.toUint128();\\n    _transfer(_msgSender(), recipient, castAmount);\\n    return true;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external virtual override returns (bool) {\\n    uint128 castAmount = amount.toUint128();\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - castAmount);\\n    _transfer(sender, recipient, castAmount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Increases the allowance of spender to spend _msgSender() tokens\\n   * @param spender The user allowed to spend on behalf of _msgSender()\\n   * @param addedValue The amount being added to the allowance\\n   * @return `true`\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Decreases the allowance of spender to spend _msgSender() tokens\\n   * @param spender The user allowed to spend on behalf of _msgSender()\\n   * @param subtractedValue The amount being subtracted to the allowance\\n   * @return `true`\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    external\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfers tokens between two users and apply incentives if defined.\\n   * @param sender The source address\\n   * @param recipient The destination address\\n   * @param amount The amount getting transferred\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint128 amount\\n  ) internal virtual {\\n    uint128 oldSenderBalance = _userState[sender].balance;\\n    _userState[sender].balance = oldSenderBalance - amount;\\n    uint128 oldRecipientBalance = _userState[recipient].balance;\\n    _userState[recipient].balance = oldRecipientBalance + amount;\\n\\n    IAaveIncentivesController incentivesControllerLocal = _incentivesController;\\n    if (address(incentivesControllerLocal) != address(0)) {\\n      uint256 currentTotalSupply = _totalSupply;\\n      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);\\n      if (sender != recipient) {\\n        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to use `amount` of `owner`s balance\\n   * @param owner The address owning the tokens\\n   * @param spender The address approved for spending\\n   * @param amount The amount of tokens to approve spending of\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @notice Update the name of the token\\n   * @param newName The new name for the token\\n   */\\n  function _setName(string memory newName) internal {\\n    _name = newName;\\n  }\\n\\n  /**\\n   * @notice Update the symbol for the token\\n   * @param newSymbol The new symbol for the token\\n   */\\n  function _setSymbol(string memory newSymbol) internal {\\n    _symbol = newSymbol;\\n  }\\n\\n  /**\\n   * @notice Update the number of decimals for the token\\n   * @param newDecimals The new number of decimals for the token\\n   */\\n  function _setDecimals(uint8 newDecimals) internal {\\n    _decimals = newDecimals;\\n  }\\n}\\n\",\"keccak256\":\"0xac8ae825e4f6243c42cb8266caaec5617401e8920e5994ead6bbceb3dedb211e\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/tokenization/base/MintableIncentivizedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IAaveIncentivesController} from '../../../interfaces/IAaveIncentivesController.sol';\\nimport {IPool} from '../../../interfaces/IPool.sol';\\nimport {IncentivizedERC20} from './IncentivizedERC20.sol';\\n\\n/**\\n * @title MintableIncentivizedERC20\\n * @author Aave\\n * @notice Implements mint and burn functions for IncentivizedERC20\\n */\\nabstract contract MintableIncentivizedERC20 is IncentivizedERC20 {\\n  /**\\n   * @dev Constructor.\\n   * @param pool The reference to the main Pool contract\\n   * @param name The name of the token\\n   * @param symbol The symbol of the token\\n   * @param decimals The number of decimals of the token\\n   */\\n  constructor(\\n    IPool pool,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) IncentivizedERC20(pool, name, symbol, decimals) {\\n    // Intentionally left blank\\n  }\\n\\n  /**\\n   * @notice Mints tokens to an account and apply incentives if defined\\n   * @param account The address receiving tokens\\n   * @param amount The amount of tokens to mint\\n   */\\n  function _mint(address account, uint128 amount) internal virtual {\\n    uint256 oldTotalSupply = _totalSupply;\\n    _totalSupply = oldTotalSupply + amount;\\n\\n    uint128 oldAccountBalance = _userState[account].balance;\\n    _userState[account].balance = oldAccountBalance + amount;\\n\\n    IAaveIncentivesController incentivesControllerLocal = _incentivesController;\\n    if (address(incentivesControllerLocal) != address(0)) {\\n      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);\\n    }\\n  }\\n\\n  /**\\n   * @notice Burns tokens from an account and apply incentives if defined\\n   * @param account The account whose tokens are burnt\\n   * @param amount The amount of tokens to burn\\n   */\\n  function _burn(address account, uint128 amount) internal virtual {\\n    uint256 oldTotalSupply = _totalSupply;\\n    _totalSupply = oldTotalSupply - amount;\\n\\n    uint128 oldAccountBalance = _userState[account].balance;\\n    _userState[account].balance = oldAccountBalance - amount;\\n\\n    IAaveIncentivesController incentivesControllerLocal = _incentivesController;\\n\\n    if (address(incentivesControllerLocal) != address(0)) {\\n      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x89b86bc8366a91b27c3cf70d0ceef45de9cc6e997a692615588a0c6114f82756\",\"license\":\"BUSL-1.1\"},\"src/contracts/facilitators/aave/interestStrategy/interfaces/IGhoDiscountRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IGhoDiscountRateStrategy\\n * @author Aave\\n * @notice Defines the basic interface of the GhoDiscountRateStrategy\\n */\\ninterface IGhoDiscountRateStrategy {\\n  /**\\n   * @notice Calculates the discount rate depending on the debt and discount token balances\\n   * @param debtBalance The debt balance of the user\\n   * @param discountTokenBalance The discount token balance of the user\\n   * @return The discount rate, as a percentage - the maximum can be 10000 = 100.00%\\n   */\\n  function calculateDiscountRate(\\n    uint256 debtBalance,\\n    uint256 discountTokenBalance\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa22740aece637afdfa9b207b3fa0211af04ad8e10e4371872160c07d0166cc6a\",\"license\":\"MIT\"},\"src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from '@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {SafeCast} from '@aave/core-v3/contracts/dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {VersionedInitializable} from '@aave/core-v3/contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol';\\nimport {WadRayMath} from '@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol';\\nimport {PercentageMath} from '@aave/core-v3/contracts/protocol/libraries/math/PercentageMath.sol';\\nimport {Errors} from '@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol';\\nimport {IPool} from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport {IAaveIncentivesController} from '@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol';\\nimport {IInitializableDebtToken} from '@aave/core-v3/contracts/interfaces/IInitializableDebtToken.sol';\\nimport {IVariableDebtToken} from '@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol';\\nimport {EIP712Base} from '@aave/core-v3/contracts/protocol/tokenization/base/EIP712Base.sol';\\nimport {DebtTokenBase} from '@aave/core-v3/contracts/protocol/tokenization/base/DebtTokenBase.sol';\\n\\n// Gho Imports\\nimport {IGhoDiscountRateStrategy} from '../interestStrategy/interfaces/IGhoDiscountRateStrategy.sol';\\nimport {IGhoVariableDebtToken} from './interfaces/IGhoVariableDebtToken.sol';\\nimport {ScaledBalanceTokenBase} from './base/ScaledBalanceTokenBase.sol';\\n\\n/**\\n * @title GhoVariableDebtToken\\n * @author Aave\\n * @notice Implements a variable debt token to track the borrowing positions of users\\n * at variable rate mode for GHO\\n * @dev Transfer and approve functionalities are disabled since its a non-transferable token\\n */\\ncontract GhoVariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IGhoVariableDebtToken {\\n  using WadRayMath for uint256;\\n  using SafeCast for uint256;\\n  using PercentageMath for uint256;\\n\\n  uint256 public constant DEBT_TOKEN_REVISION = 0x1;\\n\\n  // Corresponding AToken to this DebtToken\\n  address internal _ghoAToken;\\n\\n  // Token that grants discounts off the debt interest\\n  IERC20 internal _discountToken;\\n\\n  // Strategy of the discount rate to apply on debt interests\\n  IGhoDiscountRateStrategy internal _discountRateStrategy;\\n\\n  struct GhoUserState {\\n    // Accumulated debt interest of the user\\n    uint128 accumulatedDebtInterest;\\n    // Discount percent of the user (expressed in bps)\\n    uint16 discountPercent;\\n  }\\n\\n  // Map of users' address and their gho state data (userAddress => ghoUserState)\\n  mapping(address => GhoUserState) internal _ghoUserState;\\n\\n  /**\\n   * @dev Only discount token can call functions marked by this modifier.\\n   */\\n  modifier onlyDiscountToken() {\\n    require(address(_discountToken) == msg.sender, 'CALLER_NOT_DISCOUNT_TOKEN');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Only AToken can call functions marked by this modifier.\\n   */\\n  modifier onlyAToken() {\\n    require(_ghoAToken == msg.sender, 'CALLER_NOT_A_TOKEN');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Constructor.\\n   * @param pool The address of the Pool contract\\n   */\\n  constructor(\\n    IPool pool\\n  )\\n    DebtTokenBase()\\n    ScaledBalanceTokenBase(pool, 'GHO_VARIABLE_DEBT_TOKEN_IMPL', 'GHO_VARIABLE_DEBT_TOKEN_IMPL', 0)\\n  {\\n    // Intentionally left blank\\n  }\\n\\n  /// @inheritdoc IInitializableDebtToken\\n  function initialize(\\n    IPool initializingPool,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external override initializer {\\n    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);\\n    _setName(debtTokenName);\\n    _setSymbol(debtTokenSymbol);\\n    _setDecimals(debtTokenDecimals);\\n\\n    _underlyingAsset = underlyingAsset;\\n    _incentivesController = incentivesController;\\n\\n    _domainSeparator = _calculateDomainSeparator();\\n\\n    emit Initialized(\\n      underlyingAsset,\\n      address(POOL),\\n      address(incentivesController),\\n      debtTokenDecimals,\\n      debtTokenName,\\n      debtTokenSymbol,\\n      params\\n    );\\n  }\\n\\n  /// @inheritdoc VersionedInitializable\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return DEBT_TOKEN_REVISION;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function balanceOf(address user) public view virtual override returns (uint256) {\\n    uint256 scaledBalance = super.balanceOf(user);\\n\\n    if (scaledBalance == 0) {\\n      return 0;\\n    }\\n\\n    uint256 index = POOL.getReserveNormalizedVariableDebt(_underlyingAsset);\\n    uint256 previousIndex = _userState[user].additionalData;\\n    uint256 balance = scaledBalance.rayMul(index);\\n    if (index == previousIndex) {\\n      return balance;\\n    }\\n\\n    uint256 discountPercent = _ghoUserState[user].discountPercent;\\n    if (discountPercent != 0) {\\n      uint256 balanceIncrease = balance - scaledBalance.rayMul(previousIndex);\\n      balance -= balanceIncrease.percentMul(discountPercent);\\n    }\\n\\n    return balance;\\n  }\\n\\n  /// @inheritdoc IVariableDebtToken\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external virtual override onlyPool returns (bool, uint256) {\\n    if (user != onBehalfOf) {\\n      _decreaseBorrowAllowance(onBehalfOf, user, amount);\\n    }\\n    return (_mintScaled(user, onBehalfOf, amount, index), scaledTotalSupply());\\n  }\\n\\n  /// @inheritdoc IVariableDebtToken\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 index\\n  ) external virtual override onlyPool returns (uint256) {\\n    _burnScaled(from, address(0), amount, index);\\n    return scaledTotalSupply();\\n  }\\n\\n  /**\\n   * @notice Returns the amount of tokens in existence.\\n   * @dev It does not account for active discounts of the users. The discount is deducted from the user's debt at\\n   * repayment / liquidation time, so this function does always return a greater or equal value than the actual total\\n   * supply.\\n   * @return The amount of tokens in existence (without accounting for active discounts on debt)\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return super.totalSupply().rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));\\n  }\\n\\n  /// @inheritdoc EIP712Base\\n  function _EIP712BaseId() internal view override returns (string memory) {\\n    return name();\\n  }\\n\\n  /**\\n   * @dev Being non transferrable, the debt token does not implement any of the\\n   * standard ERC20 functions for transfer and allowance.\\n   */\\n  function transfer(address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function allowance(address, address) external view virtual override returns (uint256) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function approve(address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function transferFrom(address, address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function increaseAllowance(address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function decreaseAllowance(address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  /// @inheritdoc IVariableDebtToken\\n  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {\\n    return _underlyingAsset;\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function setAToken(address ghoAToken) external override onlyPoolAdmin {\\n    require(_ghoAToken == address(0), 'ATOKEN_ALREADY_SET');\\n    require(ghoAToken != address(0), 'ZERO_ADDRESS_NOT_VALID');\\n    _ghoAToken = ghoAToken;\\n    emit ATokenSet(ghoAToken);\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function getAToken() external view override returns (address) {\\n    return _ghoAToken;\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function updateDiscountRateStrategy(\\n    address newDiscountRateStrategy\\n  ) external override onlyPoolAdmin {\\n    require(newDiscountRateStrategy != address(0), 'ZERO_ADDRESS_NOT_VALID');\\n    address oldDiscountRateStrategy = address(_discountRateStrategy);\\n    _discountRateStrategy = IGhoDiscountRateStrategy(newDiscountRateStrategy);\\n    emit DiscountRateStrategyUpdated(oldDiscountRateStrategy, newDiscountRateStrategy);\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function getDiscountRateStrategy() external view override returns (address) {\\n    return address(_discountRateStrategy);\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function updateDiscountToken(address newDiscountToken) external override onlyPoolAdmin {\\n    require(newDiscountToken != address(0), 'ZERO_ADDRESS_NOT_VALID');\\n    address oldDiscountToken = address(_discountToken);\\n    _discountToken = IERC20(newDiscountToken);\\n    emit DiscountTokenUpdated(oldDiscountToken, newDiscountToken);\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function getDiscountToken() external view override returns (address) {\\n    return address(_discountToken);\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function updateDiscountDistribution(\\n    address sender,\\n    address recipient,\\n    uint256 senderDiscountTokenBalance,\\n    uint256 recipientDiscountTokenBalance,\\n    uint256 amount\\n  ) external override onlyDiscountToken {\\n    // Skipping computation in case of discount token self-transfer\\n    if (sender == recipient) {\\n      return;\\n    }\\n\\n    uint256 senderPreviousScaledBalance = super.balanceOf(sender);\\n    uint256 recipientPreviousScaledBalance = super.balanceOf(recipient);\\n\\n    // Skipping computation in case users do not have a position\\n    if (senderPreviousScaledBalance == 0 && recipientPreviousScaledBalance == 0) {\\n      return;\\n    }\\n\\n    uint256 index = POOL.getReserveNormalizedVariableDebt(_underlyingAsset);\\n\\n    uint256 balanceIncrease;\\n    uint256 discountScaled;\\n\\n    if (senderPreviousScaledBalance > 0) {\\n      (balanceIncrease, discountScaled) = _accrueDebtOnAction(\\n        sender,\\n        senderPreviousScaledBalance,\\n        _ghoUserState[sender].discountPercent,\\n        index\\n      );\\n\\n      _burn(sender, discountScaled.toUint128());\\n\\n      _refreshDiscountPercent(\\n        sender,\\n        super.balanceOf(sender).rayMul(index),\\n        senderDiscountTokenBalance - amount,\\n        _ghoUserState[sender].discountPercent\\n      );\\n\\n      emit Transfer(address(0), sender, balanceIncrease);\\n      emit Mint(address(0), sender, balanceIncrease, balanceIncrease, index);\\n    }\\n\\n    if (recipientPreviousScaledBalance > 0) {\\n      (balanceIncrease, discountScaled) = _accrueDebtOnAction(\\n        recipient,\\n        recipientPreviousScaledBalance,\\n        _ghoUserState[recipient].discountPercent,\\n        index\\n      );\\n\\n      _burn(recipient, discountScaled.toUint128());\\n\\n      _refreshDiscountPercent(\\n        recipient,\\n        super.balanceOf(recipient).rayMul(index),\\n        recipientDiscountTokenBalance + amount,\\n        _ghoUserState[recipient].discountPercent\\n      );\\n\\n      emit Transfer(address(0), recipient, balanceIncrease);\\n      emit Mint(address(0), recipient, balanceIncrease, balanceIncrease, index);\\n    }\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function getDiscountPercent(address user) external view override returns (uint256) {\\n    return _ghoUserState[user].discountPercent;\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function getBalanceFromInterest(address user) external view override returns (uint256) {\\n    return _ghoUserState[user].accumulatedDebtInterest;\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function decreaseBalanceFromInterest(address user, uint256 amount) external override onlyAToken {\\n    _ghoUserState[user].accumulatedDebtInterest = (_ghoUserState[user].accumulatedDebtInterest -\\n      amount).toUint128();\\n  }\\n\\n  /// @inheritdoc IGhoVariableDebtToken\\n  function rebalanceUserDiscountPercent(address user) external override {\\n    uint256 index = POOL.getReserveNormalizedVariableDebt(_underlyingAsset);\\n    uint256 previousScaledBalance = super.balanceOf(user);\\n    uint256 discountPercent = _ghoUserState[user].discountPercent;\\n\\n    (uint256 balanceIncrease, uint256 discountScaled) = _accrueDebtOnAction(\\n      user,\\n      previousScaledBalance,\\n      discountPercent,\\n      index\\n    );\\n\\n    _burn(user, discountScaled.toUint128());\\n\\n    _refreshDiscountPercent(\\n      user,\\n      super.balanceOf(user).rayMul(index),\\n      _discountToken.balanceOf(user),\\n      discountPercent\\n    );\\n\\n    emit Transfer(address(0), user, balanceIncrease);\\n    emit Mint(address(0), user, balanceIncrease, balanceIncrease, index);\\n  }\\n\\n  /**\\n   * @notice Implements the basic logic to mint a scaled balance token.\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the scaled tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function _mintScaled(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) internal override returns (bool) {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);\\n\\n    uint256 previousScaledBalance = super.balanceOf(onBehalfOf);\\n    uint256 discountPercent = _ghoUserState[onBehalfOf].discountPercent;\\n    (uint256 balanceIncrease, uint256 discountScaled) = _accrueDebtOnAction(\\n      onBehalfOf,\\n      previousScaledBalance,\\n      discountPercent,\\n      index\\n    );\\n\\n    // confirm the amount being borrowed is greater than the discount\\n    if (amountScaled > discountScaled) {\\n      _mint(onBehalfOf, (amountScaled - discountScaled).toUint128());\\n    } else {\\n      _burn(onBehalfOf, (discountScaled - amountScaled).toUint128());\\n    }\\n\\n    _refreshDiscountPercent(\\n      onBehalfOf,\\n      super.balanceOf(onBehalfOf).rayMul(index),\\n      _discountToken.balanceOf(onBehalfOf),\\n      discountPercent\\n    );\\n\\n    uint256 amountToMint = amount + balanceIncrease;\\n    emit Transfer(address(0), onBehalfOf, amountToMint);\\n    emit Mint(caller, onBehalfOf, amountToMint, balanceIncrease, index);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Implements the basic logic to burn a scaled balance token.\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param user The user which debt is burnt\\n   * @param target The address that will receive the underlying, if any\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   */\\n  function _burnScaled(\\n    address user,\\n    address target,\\n    uint256 amount,\\n    uint256 index\\n  ) internal override {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);\\n\\n    uint256 balanceBeforeBurn = balanceOf(user);\\n\\n    uint256 previousScaledBalance = super.balanceOf(user);\\n    uint256 discountPercent = _ghoUserState[user].discountPercent;\\n    (uint256 balanceIncrease, uint256 discountScaled) = _accrueDebtOnAction(\\n      user,\\n      previousScaledBalance,\\n      discountPercent,\\n      index\\n    );\\n\\n    if (amount == balanceBeforeBurn) {\\n      _burn(user, previousScaledBalance.toUint128());\\n    } else {\\n      _burn(user, (amountScaled + discountScaled).toUint128());\\n    }\\n\\n    _refreshDiscountPercent(\\n      user,\\n      super.balanceOf(user).rayMul(index),\\n      _discountToken.balanceOf(user),\\n      discountPercent\\n    );\\n\\n    if (balanceIncrease > amount) {\\n      uint256 amountToMint = balanceIncrease - amount;\\n      emit Transfer(address(0), user, amountToMint);\\n      emit Mint(user, user, amountToMint, balanceIncrease, index);\\n    } else {\\n      uint256 amountToBurn = amount - balanceIncrease;\\n      emit Transfer(user, address(0), amountToBurn);\\n      emit Burn(user, target, amountToBurn, balanceIncrease, index);\\n    }\\n  }\\n\\n  /**\\n   * @dev Accumulates debt of the user since last action.\\n   * @dev It skips applying discount in case there is no balance increase or discount percent is zero.\\n   * @param user The address of the user\\n   * @param previousScaledBalance The previous scaled balance of the user\\n   * @param discountPercent The discount percent\\n   * @param index The variable debt index of the reserve\\n   * @return The increase in scaled balance since the last action of `user`\\n   * @return The discounted amount in scaled balance off the balance increase\\n   */\\n  function _accrueDebtOnAction(\\n    address user,\\n    uint256 previousScaledBalance,\\n    uint256 discountPercent,\\n    uint256 index\\n  ) internal returns (uint256, uint256) {\\n    uint256 balanceIncrease = previousScaledBalance.rayMul(index) -\\n      previousScaledBalance.rayMul(_userState[user].additionalData);\\n\\n    uint256 discountScaled = 0;\\n    if (balanceIncrease != 0 && discountPercent != 0) {\\n      uint256 discount = balanceIncrease.percentMul(discountPercent);\\n      discountScaled = discount.rayDiv(index);\\n      balanceIncrease = balanceIncrease - discount;\\n    }\\n\\n    _userState[user].additionalData = index.toUint128();\\n\\n    _ghoUserState[user].accumulatedDebtInterest = (balanceIncrease +\\n      _ghoUserState[user].accumulatedDebtInterest).toUint128();\\n\\n    return (balanceIncrease, discountScaled);\\n  }\\n\\n  /**\\n   * @dev Updates the discount percent of the user according to current discount rate strategy\\n   * @param user The address of the user\\n   * @param balance The debt balance of the user\\n   * @param discountTokenBalance The discount token balance of the user\\n   * @param previousDiscountPercent The previous discount percent of the user\\n   */\\n  function _refreshDiscountPercent(\\n    address user,\\n    uint256 balance,\\n    uint256 discountTokenBalance,\\n    uint256 previousDiscountPercent\\n  ) internal {\\n    uint256 newDiscountPercent = _discountRateStrategy.calculateDiscountRate(\\n      balance,\\n      discountTokenBalance\\n    );\\n\\n    if (previousDiscountPercent != newDiscountPercent) {\\n      _ghoUserState[user].discountPercent = newDiscountPercent.toUint16();\\n      emit DiscountPercentUpdated(user, previousDiscountPercent, newDiscountPercent);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4dae6021725de39213201523fb03412279b1cb5a8390ae1cb2b0da9bdc2de391\",\"license\":\"MIT\"},\"src/contracts/facilitators/aave/tokens/base/ScaledBalanceTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {SafeCast} from '@aave/core-v3/contracts/dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {Errors} from '@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol';\\nimport {WadRayMath} from '@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol';\\nimport {IPool} from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport {IScaledBalanceToken} from '@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol';\\nimport {MintableIncentivizedERC20} from '@aave/core-v3/contracts/protocol/tokenization/base/MintableIncentivizedERC20.sol';\\n\\n/**\\n * @title ScaledBalanceTokenBase\\n * @author Aave\\n * @notice Basic ERC20 implementation of scaled balance token\\n */\\nabstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBalanceToken {\\n  using WadRayMath for uint256;\\n  using SafeCast for uint256;\\n\\n  /**\\n   * @dev Constructor.\\n   * @param pool The reference to the main Pool contract\\n   * @param name The name of the token\\n   * @param symbol The symbol of the token\\n   * @param decimals The number of decimals of the token\\n   */\\n  constructor(\\n    IPool pool,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) MintableIncentivizedERC20(pool, name, symbol, decimals) {\\n    // Intentionally left blank\\n  }\\n\\n  /// @inheritdoc IScaledBalanceToken\\n  function scaledBalanceOf(address user) external view override returns (uint256) {\\n    return super.balanceOf(user);\\n  }\\n\\n  /// @inheritdoc IScaledBalanceToken\\n  function getScaledUserBalanceAndSupply(\\n    address user\\n  ) external view override returns (uint256, uint256) {\\n    return (super.balanceOf(user), super.totalSupply());\\n  }\\n\\n  /// @inheritdoc IScaledBalanceToken\\n  function scaledTotalSupply() public view virtual override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /// @inheritdoc IScaledBalanceToken\\n  function getPreviousIndex(address user) external view virtual override returns (uint256) {\\n    return _userState[user].additionalData;\\n  }\\n\\n  /**\\n   * @notice Implements the basic logic to mint a scaled balance token.\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the scaled tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function _mintScaled(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) internal virtual returns (bool) {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);\\n\\n    uint256 scaledBalance = super.balanceOf(onBehalfOf);\\n    uint256 balanceIncrease = scaledBalance.rayMul(index) -\\n      scaledBalance.rayMul(_userState[onBehalfOf].additionalData);\\n\\n    _userState[onBehalfOf].additionalData = index.toUint128();\\n\\n    _mint(onBehalfOf, amountScaled.toUint128());\\n\\n    uint256 amountToMint = amount + balanceIncrease;\\n    emit Transfer(address(0), onBehalfOf, amountToMint);\\n    emit Mint(caller, onBehalfOf, amountToMint, balanceIncrease, index);\\n\\n    return (scaledBalance == 0);\\n  }\\n\\n  /**\\n   * @notice Implements the basic logic to burn a scaled balance token.\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param user The user which debt is burnt\\n   * @param target The address that will receive the underlying, if any\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   */\\n  function _burnScaled(\\n    address user,\\n    address target,\\n    uint256 amount,\\n    uint256 index\\n  ) internal virtual {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);\\n\\n    uint256 scaledBalance = super.balanceOf(user);\\n    uint256 balanceIncrease = scaledBalance.rayMul(index) -\\n      scaledBalance.rayMul(_userState[user].additionalData);\\n\\n    _userState[user].additionalData = index.toUint128();\\n\\n    _burn(user, amountScaled.toUint128());\\n\\n    if (balanceIncrease > amount) {\\n      uint256 amountToMint = balanceIncrease - amount;\\n      emit Transfer(address(0), user, amountToMint);\\n      emit Mint(user, user, amountToMint, balanceIncrease, index);\\n    } else {\\n      uint256 amountToBurn = amount - balanceIncrease;\\n      emit Transfer(user, address(0), amountToBurn);\\n      emit Burn(user, target, amountToBurn, balanceIncrease, index);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0e30b861004d2174618f2da2107e39e131fef9b54f1d820f03f4039f5dbd9579\",\"license\":\"MIT\"},\"src/contracts/facilitators/aave/tokens/interfaces/IGhoVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IVariableDebtToken} from '@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol';\\n\\n/**\\n * @title IGhoVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface of the VariableDebtToken\\n */\\ninterface IGhoVariableDebtToken is IVariableDebtToken {\\n  /**\\n   * @dev Emitted when the address of the GHO AToken is set\\n   * @param aToken The address of the GhoAToken contract\\n   */\\n  event ATokenSet(address indexed aToken);\\n\\n  /**\\n   * @dev Emitted when the GhoDiscountRateStrategy is updated\\n   * @param oldDiscountRateStrategy The address of the old GhoDiscountRateStrategy\\n   * @param newDiscountRateStrategy The address of the new GhoDiscountRateStrategy\\n   */\\n  event DiscountRateStrategyUpdated(\\n    address indexed oldDiscountRateStrategy,\\n    address indexed newDiscountRateStrategy\\n  );\\n\\n  /**\\n   * @dev Emitted when the Discount Token is updated\\n   * @param oldDiscountToken The address of the old discount token\\n   * @param newDiscountToken The address of the new discount token\\n   */\\n  event DiscountTokenUpdated(address indexed oldDiscountToken, address indexed newDiscountToken);\\n\\n  /**\\n   * @dev Emitted when a user's discount is updated\\n   * @param user The address of the user\\n   * @param oldDiscountPercent The old discount percent of the user\\n   * @param newDiscountPercent The new discount percent of the user\\n   */\\n  event DiscountPercentUpdated(\\n    address indexed user,\\n    uint256 oldDiscountPercent,\\n    uint256 indexed newDiscountPercent\\n  );\\n\\n  /**\\n   * @notice Sets a reference to the GHO AToken\\n   * @param ghoAToken The address of the GhoAToken contract\\n   */\\n  function setAToken(address ghoAToken) external;\\n\\n  /**\\n   * @notice Returns the address of the GHO AToken\\n   * @return The address of the GhoAToken contract\\n   */\\n  function getAToken() external view returns (address);\\n\\n  /**\\n   * @notice Updates the Discount Rate Strategy\\n   * @param newDiscountRateStrategy The address of DiscountRateStrategy contract\\n   */\\n  function updateDiscountRateStrategy(address newDiscountRateStrategy) external;\\n\\n  /**\\n   * @notice Returns the address of the Discount Rate Strategy\\n   * @return The address of DiscountRateStrategy contract\\n   */\\n  function getDiscountRateStrategy() external view returns (address);\\n\\n  /**\\n   * @notice Updates the Discount Token\\n   * @param newDiscountToken The address of the DiscountToken contract\\n   */\\n  function updateDiscountToken(address newDiscountToken) external;\\n\\n  /**\\n   * @notice Returns the address of the Discount Token\\n   * @return address The address of DiscountToken\\n   */\\n  function getDiscountToken() external view returns (address);\\n\\n  /**\\n   * @notice Updates the discount percents of the users when a discount token transfer occurs\\n   * @dev To be executed before the token transfer happens\\n   * @param sender The address of sender\\n   * @param recipient The address of recipient\\n   * @param senderDiscountTokenBalance The sender discount token balance\\n   * @param recipientDiscountTokenBalance The recipient discount token balance\\n   * @param amount The amount of discount token being transferred\\n   */\\n  function updateDiscountDistribution(\\n    address sender,\\n    address recipient,\\n    uint256 senderDiscountTokenBalance,\\n    uint256 recipientDiscountTokenBalance,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Returns the discount percent being applied to the debt interest of the user\\n   * @param user The address of the user\\n   * @return The discount percent (expressed in bps)\\n   */\\n  function getDiscountPercent(address user) external view returns (uint256);\\n\\n  /*\\n   * @dev Returns the amount of interests accumulated by the user\\n   * @param user The address of the user\\n   * @return The amount of interests accumulated by the user\\n   */\\n  function getBalanceFromInterest(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Decrease the amount of interests accumulated by the user\\n   * @param user The address of the user\\n   * @param amount The value to be decrease\\n   */\\n  function decreaseBalanceFromInterest(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Rebalances the discount percent of a user\\n   * @param user The address of the user\\n   */\\n  function rebalanceUserDiscountPercent(address user) external;\\n}\\n\",\"keccak256\":\"0xb504f652470252fae295c63b975d3ad211fdf2c30d15451ed7e270ae37bf8d3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600080553480156200001557600080fd5b506040516200305938038062003059833981016040819052620000389162000245565b806040518060400160405280601c81526020017f47484f5f5641524941424c455f444542545f544f4b454e5f494d504c000000008152506040518060400160405280601c81526020017f47484f5f5641524941424c455f444542545f544f4b454e5f494d504c00000000815250600083838383838383834660808181525050836001600160a01b0316630542975c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c919062000245565b6001600160a01b031660a05282516200013d90603b90602086019062000186565b5081516200015390603c90602085019062000186565b50603d805460ff191660ff9290921691909117905550506001600160a01b031660c05250620002a9975050505050505050565b82805462000194906200026c565b90600052602060002090601f016020900481019282620001b8576000855562000203565b82601f10620001d357805160ff191683800117855562000203565b8280016001018555821562000203579182015b8281111562000203578251825591602001919060010190620001e6565b506200021192915062000215565b5090565b5b8082111562000211576000815560010162000216565b6001600160a01b03811681146200024257600080fd5b50565b6000602082840312156200025857600080fd5b815162000265816200022c565b9392505050565b600181811c908216806200028157607f821691505b60208210811415620002a357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051612d3362000326600039600081816103fb01528181610a2501528181610d5c015281816111fc0152818161133b0152818161152f0152818161166b0152818161173a0152611ad8015260008181610aa501528181610fd8015281816117cd015261196c01526000610c570152612d336000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80637ccf1a1511610146578063b9a7b622116100c3578063e075398611610087578063e075398614610584578063e655dbd8146105bd578063efe3de14146105d0578063f3bfc738146105e1578063f5298aca14610608578063fe49b7941461061b57600080fd5b8063b9a7b62214610535578063c04a8a101461053d578063c222ec8a14610550578063ce79f38214610563578063dd62ed3e1461057657600080fd5b8063a9059cbb1161010a578063a9059cbb14610276578063b16a19de146104e1578063b1bf962d146104f2578063b29c55bc146104fa578063b3f1c93d1461050b57600080fd5b80637ccf1a151461046b5780637ecebe001461049d5780637f3c4a66146104c657806395d89b41146104d9578063a457c2d71461027657600080fd5b80633644e515116101d45780636c53272b116101985780636c53272b146103af57806370a08231146103e35780637535d246146103f657806375d2641314610435578063781603761461044b57600080fd5b80633644e5151461034857806339509351146102765780635b9c4cf1146103505780635f09d84c146103635780636bd76d241461037657600080fd5b806318160ddd1161021b57806318160ddd146102e95780631c98cfb7146102ff5780631da24f3e1461031257806323b872dd14610325578063313ce5671461033357600080fd5b806306fdde0314610258578063095ea7b3146102765780630afbcdc9146102995780630b52d558146102c15780630d44dedc146102d6575b600080fd5b61026061062c565b60405161026d91906126da565b60405180910390f35b61028961028436600461271c565b6106be565b604051901515815260200161026d565b6102ac6102a7366004612748565b6106f9565b6040805192835260208301919091520161026d565b6102d46102cf366004612776565b610711565b005b6102d46102e436600461271c565b61093c565b6102f16109fc565b60405190815260200161026d565b6102d461030d366004612748565b610aa1565b6102f1610320366004612748565b610c42565b6102896102843660046127e4565b603d5460405160ff909116815260200161026d565b6102f1610c53565b6102d461035e366004612825565b610c8c565b6102d4610371366004612748565b610fd4565b6102f1610384366004612876565b6001600160a01b03918216600090815260366020908152604080832093909416825291909152205490565b6102f16103bd366004612748565b6001600160a01b0316600090815260416020526040902054600160801b900461ffff1690565b6102f16103f1366004612748565b6111bb565b61041d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161026d565b603d5461010090046001600160a01b031661041d565b610260604051806040016040528060018152602001603160f81b81525081565b6102f1610479366004612748565b6001600160a01b03166000908152604160205260409020546001600160801b031690565b6102f16104ab366004612748565b6001600160a01b031660009081526034602052604090205490565b6102d46104d4366004612748565b611316565b6102606114f4565b6037546001600160a01b031661041d565b6102f1611503565b603e546001600160a01b031661041d565b61051e6105193660046128af565b61150e565b60408051921515835260208301919091520161026d565b6102f1600181565b6102d461054b36600461271c565b6115bb565b6102d461055e3660046129e1565b6115ca565b6102d4610571366004612748565b6117c9565b6102f1610284366004612876565b6102f1610592366004612748565b6001600160a01b0316600090815260386020526040902054600160801b90046001600160801b031690565b6102d46105cb366004612748565b611968565b603f546001600160a01b031661041d565b6102f17f323db0410fecc107e39e2af5908671f4c8d106123b35a51501bb805c5fa36aa081565b6102f1610616366004612ab6565b611ab9565b6040546001600160a01b031661041d565b6060603b805461063b90612aeb565b80601f016020809104026020016040519081016040528092919081815260200182805461066790612aeb565b80156106b45780601f10610689576101008083540402835291602001916106b4565b820191906000526020600020905b81548152906001019060200180831161069757829003601f168201915b5050505050905090565b6040805180820182526002815261038360f41b6020820152905162461bcd60e51b81526000916106f0916004016126da565b60405180910390fd5b60008061070583611b3c565b603a5491509150915091565b604080518082019091526002815261373760f01b60208201526001600160a01b0388166107515760405162461bcd60e51b81526004016106f091906126da565b50834211156040518060400160405280600281526020016106e760f31b8152509061078f5760405162461bcd60e51b81526004016106f091906126da565b506001600160a01b038716600090815260346020526040812054906107b2610c53565b604080517f323db0410fecc107e39e2af5908671f4c8d106123b35a51501bb805c5fa36aa060208201526001600160a01b038b1691810191909152606081018990526080810184905260a0810188905260c0016040516020818303038152906040528051906020012060405160200161084292919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa1580156108aa573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b03161460405180604001604052806002815260200161373960f01b815250906109015760405162461bcd60e51b81526004016106f091906126da565b5061090d826001612b3c565b6001600160a01b038a16600090815260346020526040902055610931898989611b60565b505050505050505050565b603e546001600160a01b0316331461098b5760405162461bcd60e51b815260206004820152601260248201527121a0a62622a92fa727aa2fa0afaa27a5a2a760711b60448201526064016106f0565b6001600160a01b0382166000908152604160205260409020546109c1906109bc9083906001600160801b0316612b54565b611bca565b6001600160a01b0392909216600090815260416020526040902080546001600160801b0319166001600160801b039093169290921790915550565b60375460405163386497fd60e01b81526001600160a01b039182166004820152600091610a9c917f00000000000000000000000000000000000000000000000000000000000000009091169063386497fd90602401602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190612b6b565b603a545b90611c37565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b259190612b84565b604051637be53ca160e01b81523360048201529091506001600160a01b03821690637be53ca190602401602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b909190612ba1565b604051806040016040528060018152602001603160f81b81525090610bc85760405162461bcd60e51b81526004016106f091906126da565b506001600160a01b038216610bef5760405162461bcd60e51b81526004016106f090612bc3565b603f80546001600160a01b038481166001600160a01b0319831681179093556040519116919082907f6b489e1dbfbe36f55c511c098bcc9d92fec7f04f74ceb75018697ab68f7d352990600090a3505050565b6000610c4d82611b3c565b92915050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610c84575060355490565b610a9c611c7b565b603f546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152601960248201527f43414c4c45525f4e4f545f444953434f554e545f544f4b454e0000000000000060448201526064016106f0565b836001600160a01b0316856001600160a01b03161415610d0557610fcd565b6000610d1086611b3c565b90506000610d1d86611b3c565b905081158015610d2b575080155b15610d37575050610fcd565b60375460405163386497fd60e01b81526001600160a01b0391821660048201526000917f0000000000000000000000000000000000000000000000000000000000000000169063386497fd90602401602060405180830381865afa158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc79190612b6b565b90506000808415610ecc576001600160a01b038a16600090815260416020526040902054610e04908b908790600160801b900461ffff1686611d24565b9092509050610e1b8a610e1683611bca565b611e45565b610e5f8a610e2c85610a968e611b3c565b610e36898c612b54565b6001600160a01b038e16600090815260416020526040902054600160801b900461ffff16611f3e565b6040518281526001600160a01b038b1690600090600080516020612cde8339815191529060200160405180910390a360408051838152602081018490529081018490526001600160a01b038b1690600090600080516020612cbe8339815191529060600160405180910390a35b8315610fc7576001600160a01b038916600090815260416020526040902054610f04908a908690600160801b900461ffff1686611d24565b9092509050610f1689610e1683611bca565b610f5a89610f2785610a968d611b3c565b610f31898b612b3c565b6001600160a01b038d16600090815260416020526040902054600160801b900461ffff16611f3e565b6040518281526001600160a01b038a1690600090600080516020612cde8339815191529060200160405180910390a360408051838152602081018490529081018490526001600160a01b038a1690600090600080516020612cbe8339815191529060600160405180910390a35b50505050505b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190612b84565b604051637be53ca160e01b81523360048201529091506001600160a01b03821690637be53ca190602401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190612ba1565b604051806040016040528060018152602001603160f81b815250906110fb5760405162461bcd60e51b81526004016106f091906126da565b50603e546001600160a01b03161561114a5760405162461bcd60e51b8152602060048201526012602482015271105513d2d15397d053149150511657d4d15560721b60448201526064016106f0565b6001600160a01b0382166111705760405162461bcd60e51b81526004016106f090612bc3565b603e80546001600160a01b0319166001600160a01b0384169081179091556040517f07cba78d3a9bb0cf2cb0e30140558e278b50a2ba6da2e13369a0d9113034548b90600090a25050565b6000806111c783611b3c565b9050806111d75750600092915050565b60375460405163386497fd60e01b81526001600160a01b0391821660048201526000917f0000000000000000000000000000000000000000000000000000000000000000169063386497fd90602401602060405180830381865afa158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112679190612b6b565b6001600160a01b038516600090815260386020526040812054919250600160801b9091046001600160801b03169061129f8484611c37565b9050818314156112b25795945050505050565b6001600160a01b038616600090815260416020526040902054600160801b900461ffff16801561130c5760006112e88685611c37565b6112f29084612b54565b90506112fe8183612039565b6113089084612b54565b9250505b5095945050505050565b60375460405163386497fd60e01b81526001600160a01b0391821660048201526000917f0000000000000000000000000000000000000000000000000000000000000000169063386497fd90602401602060405180830381865afa158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a69190612b6b565b905060006113b383611b3c565b6001600160a01b038416600090815260416020526040812054919250600160801b90910461ffff1690806113e986858588611d24565b915091506113fa86610e1683611bca565b6114808661140b87610a968a611b3c565b603f546040516370a0823160e01b81526001600160a01b038b81166004830152909116906370a08231906024015b602060405180830381865afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190612b6b565b86611f3e565b6040518281526001600160a01b03871690600090600080516020612cde8339815191529060200160405180910390a360408051838152602081018490529081018690526001600160a01b03871690600090600080516020612cbe8339815191529060600160405180910390a3505050505050565b6060603c805461063b90612aeb565b6000610a9c603a5490565b604080518082019091526002815261323360f01b60208201526000908190337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146115755760405162461bcd60e51b81526004016106f091906126da565b50846001600160a01b0316866001600160a01b03161461159a5761159a85878661205f565b6115a686868686612105565b6115ae611503565b9150915094509492505050565b6115c6338383611b60565b5050565b6001805460ff16806115db5750303b155b806115e7575060005481115b61164a5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b60648201526084016106f0565b60015460ff16158015611669576001805460ff19168117905560008290555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168a6001600160a01b03161460405180604001604052806002815260200161383760f01b815250906116d75760405162461bcd60e51b81526004016106f091906126da565b506116e1866122a3565b6116ea856122b6565b603d8054603780546001600160a01b038d81166001600160a01b0319909216919091179091558a16610100026001600160a81b031990911660ff8a1617179055611732611c7b565b6035819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316896001600160a01b03167f40251fbfb6656cfa65a00d7879029fec1fad21d28fdcff2f4f68f52795b74f2c8a8a8a8a8a8a6040516117a596959493929190612bf3565b60405180910390a38015610fc7576001805460ff1916905550505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d9190612b84565b604051637be53ca160e01b81523360048201529091506001600160a01b03821690637be53ca190602401602060405180830381865afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190612ba1565b604051806040016040528060018152602001603160f81b815250906118f05760405162461bcd60e51b81526004016106f091906126da565b506001600160a01b0382166119175760405162461bcd60e51b81526004016106f090612bc3565b604080546001600160a01b038481166001600160a01b031983168117845592519116919082907f194bd59f47b230edccccc2be58b92dde3a5dadd835751a621af59006928bccef90600090a3505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190612b84565b604051637be53ca160e01b81523360048201529091506001600160a01b03821690637be53ca190602401602060405180830381865afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a579190612ba1565b604051806040016040528060018152602001603160f81b81525090611a8f5760405162461bcd60e51b81526004016106f091906126da565b5050603d80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b604080518082019091526002815261323360f01b6020820152600090337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611b1e5760405162461bcd60e51b81526004016106f091906126da565b50611b2c84600085856122c9565b611b34611503565b949350505050565b6001600160a01b03166000908152603860205260409020546001600160801b031690565b6001600160a01b0383811660008181526036602090815260408083208786168085529083529281902086905560375490518681529416939192917fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1910160405180910390a4505050565b60006001600160801b03821115611c335760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016106f0565b5090565b600081156b019d971e4fe8401e740000001983900484111517611c5957600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611ca661250c565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b03841660009081526038602052604081205481908190611d5c908790600160801b90046001600160801b0316611c37565b611d668786611c37565b611d709190612b54565b905060008115801590611d8257508515155b15611daf576000611d938388612039565b9050611d9f8187612516565b9150611dab8184612b54565b9250505b611db885611bca565b6001600160a01b038916600090815260386020908152604080832080546001600160801b03958616600160801b029086161790556041909152902054611e03916109bc911684612b3c565b6001600160a01b0398909816600090815260416020526040902080546001600160801b0319166001600160801b03999099169890981790975596945050505050565b603a54611e5b6001600160801b03831682612b54565b603a556001600160a01b0383166000908152603860205260409020546001600160801b0316611e8a8382612c6a565b6001600160a01b03858116600090815260386020526040902080546001600160801b0319166001600160801b039390931692909217909155603d546101009004168015610fcd576040516318c39f1760e11b81526001600160a01b038681166004830152602482018590526001600160801b03841660448301528216906331873e2e90606401600060405180830381600087803b158015611f2a57600080fd5b505af1158015610931573d6000803e3d6000fd5b6040805490516393adbec560e01b815260048101859052602481018490526000916001600160a01b0316906393adbec590604401602060405180830381865afa158015611f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb39190612b6b565b9050808214610fcd57611fc581612555565b6001600160a01b038616600081815260416020908152604091829020805461ffff95909516600160801b0261ffff60801b19909516949094179093555184815283927f74ab9665e7c36c29ddb78ef88a3e2eac73d35b8b16de7bc573e313e320104956910160405180910390a35050505050565b60008115611388198390048411151761205157600080fd5b506127109102611388010490565b6001600160a01b038084166000908152603660209081526040808320938616835292905290812054612092908390612b54565b6001600160a01b03808616600081815260366020908152604080832089861680855292529182902085905560375491519495509216927fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1906120f79086815260200190565b60405180910390a450505050565b6000806121128484612516565b6040805180820190915260028152610c8d60f21b60208201529091508161214c5760405162461bcd60e51b81526004016106f091906126da565b50600061215886611b3c565b6001600160a01b038716600090815260416020526040812054919250600160801b90910461ffff16908061218e8985858a611d24565b91509150808511156121b5576121b0896121ab6109bc8489612b54565b6125b8565b6121c6565b6121c689610e166109bc8885612b54565b612209896121d789610a968d611b3c565b603f546040516370a0823160e01b81526001600160a01b038e81166004830152909116906370a0823190602401611439565b6000612215838a612b3c565b9050896001600160a01b031660006001600160a01b0316600080516020612cde8339815191528360405161224b91815260200190565b60405180910390a360408051828152602081018590529081018990526001600160a01b03808c1691908d1690600080516020612cbe8339815191529060600160405180910390a35060019a9950505050505050505050565b80516115c690603b9060208401906125fd565b80516115c690603c9060208401906125fd565b60006122d58383612516565b604080518082019091526002815261323560f01b60208201529091508161230f5760405162461bcd60e51b81526004016106f091906126da565b50600061231b866111bb565b9050600061232887611b3c565b6001600160a01b038816600090815260416020526040812054919250600160801b90910461ffff16908061235e8a85858a611d24565b915091508488141561237c576123778a610e1686611bca565b61238d565b61238d8a610e166109bc848a612b3c565b6123d08a61239e89610a968e611b3c565b603f546040516370a0823160e01b81526001600160a01b038f81166004830152909116906370a0823190602401611439565b878211156124645760006123e48984612b54565b90508a6001600160a01b031660006001600160a01b0316600080516020612cde8339815191528360405161241a91815260200190565b60405180910390a360408051828152602081018590529081018990526001600160a01b038c16908190600080516020612cbe8339815191529060600160405180910390a350610fc7565b6000612470838a612b54565b905060006001600160a01b03168b6001600160a01b0316600080516020612cde833981519152836040516124a691815260200190565b60405180910390a360408051828152602081018590529081018990526001600160a01b03808c1691908d16907f4cf25bc1d991c17529c25213d3cc0cda295eeaad5f13f361969b12ea48015f909060600160405180910390a35050505050505050505050565b6060610a9c61062c565b600081156b033b2e3c9fd0803ce80000006002840419048411171561253a57600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b600061ffff821115611c335760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b60648201526084016106f0565b603a546125ce6001600160801b03831682612b3c565b603a556001600160a01b0383166000908152603860205260409020546001600160801b0316611e8a8382612c92565b82805461260990612aeb565b90600052602060002090601f01602090048101928261262b5760008555612671565b82601f1061264457805160ff1916838001178555612671565b82800160010185558215612671579182015b82811115612671578251825591602001919060010190612656565b50611c339291505b80821115611c335760008155600101612679565b6000815180845260005b818110156126b357602081850181015186830182015201612697565b818111156126c5576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006126ed602083018461268d565b9392505050565b6001600160a01b038116811461270957600080fd5b50565b8035612717816126f4565b919050565b6000806040838503121561272f57600080fd5b823561273a816126f4565b946020939093013593505050565b60006020828403121561275a57600080fd5b81356126ed816126f4565b803560ff8116811461271757600080fd5b600080600080600080600060e0888a03121561279157600080fd5b873561279c816126f4565b965060208801356127ac816126f4565b955060408801359450606088013593506127c860808901612765565b925060a0880135915060c0880135905092959891949750929550565b6000806000606084860312156127f957600080fd5b8335612804816126f4565b92506020840135612814816126f4565b929592945050506040919091013590565b600080600080600060a0868803121561283d57600080fd5b8535612848816126f4565b94506020860135612858816126f4565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561288957600080fd5b8235612894816126f4565b915060208301356128a4816126f4565b809150509250929050565b600080600080608085870312156128c557600080fd5b84356128d0816126f4565b935060208501356128e0816126f4565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261291c57600080fd5b813567ffffffffffffffff80821115612937576129376128f5565b604051601f8301601f19908116603f0116810190828211818310171561295f5761295f6128f5565b8160405283815286602085880101111561297857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f8401126129aa57600080fd5b50813567ffffffffffffffff8111156129c257600080fd5b6020830191508360208285010111156129da57600080fd5b9250929050565b60008060008060008060008060e0898b0312156129fd57600080fd5b8835612a08816126f4565b97506020890135612a18816126f4565b9650612a2660408a0161270c565b9550612a3460608a01612765565b9450608089013567ffffffffffffffff80821115612a5157600080fd5b612a5d8c838d0161290b565b955060a08b0135915080821115612a7357600080fd5b612a7f8c838d0161290b565b945060c08b0135915080821115612a9557600080fd5b50612aa28b828c01612998565b999c989b5096995094979396929594505050565b600080600060608486031215612acb57600080fd5b8335612ad6816126f4565b95602085013595506040909401359392505050565b600181811c90821680612aff57607f821691505b60208210811415612b2057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612b4f57612b4f612b26565b500190565b600082821015612b6657612b66612b26565b500390565b600060208284031215612b7d57600080fd5b5051919050565b600060208284031215612b9657600080fd5b81516126ed816126f4565b600060208284031215612bb357600080fd5b815180151581146126ed57600080fd5b60208082526016908201527516915493d7d05111149154d4d7d393d517d59053125160521b604082015260600190565b6001600160a01b038716815260ff8616602082015260a060408201819052600090612c209083018761268d565b8281036060840152612c32818761268d565b90508281036080840152838152838560208301376000602085830101526020601f19601f860116820101915050979650505050505050565b60006001600160801b0383811690831681811015612c8a57612c8a612b26565b039392505050565b60006001600160801b03808316818516808303821115612cb457612cb4612b26565b0194935050505056fe458f5fa412d0f69b08dd84872b0215675cc67bc1d5b6fd93300a1c3878b86196ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220546ca27176ce3f3f569a7337abbbe91281c875ce6ec2f3868deb28f2b34a64cf64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80637ccf1a1511610146578063b9a7b622116100c3578063e075398611610087578063e075398614610584578063e655dbd8146105bd578063efe3de14146105d0578063f3bfc738146105e1578063f5298aca14610608578063fe49b7941461061b57600080fd5b8063b9a7b62214610535578063c04a8a101461053d578063c222ec8a14610550578063ce79f38214610563578063dd62ed3e1461057657600080fd5b8063a9059cbb1161010a578063a9059cbb14610276578063b16a19de146104e1578063b1bf962d146104f2578063b29c55bc146104fa578063b3f1c93d1461050b57600080fd5b80637ccf1a151461046b5780637ecebe001461049d5780637f3c4a66146104c657806395d89b41146104d9578063a457c2d71461027657600080fd5b80633644e515116101d45780636c53272b116101985780636c53272b146103af57806370a08231146103e35780637535d246146103f657806375d2641314610435578063781603761461044b57600080fd5b80633644e5151461034857806339509351146102765780635b9c4cf1146103505780635f09d84c146103635780636bd76d241461037657600080fd5b806318160ddd1161021b57806318160ddd146102e95780631c98cfb7146102ff5780631da24f3e1461031257806323b872dd14610325578063313ce5671461033357600080fd5b806306fdde0314610258578063095ea7b3146102765780630afbcdc9146102995780630b52d558146102c15780630d44dedc146102d6575b600080fd5b61026061062c565b60405161026d91906126da565b60405180910390f35b61028961028436600461271c565b6106be565b604051901515815260200161026d565b6102ac6102a7366004612748565b6106f9565b6040805192835260208301919091520161026d565b6102d46102cf366004612776565b610711565b005b6102d46102e436600461271c565b61093c565b6102f16109fc565b60405190815260200161026d565b6102d461030d366004612748565b610aa1565b6102f1610320366004612748565b610c42565b6102896102843660046127e4565b603d5460405160ff909116815260200161026d565b6102f1610c53565b6102d461035e366004612825565b610c8c565b6102d4610371366004612748565b610fd4565b6102f1610384366004612876565b6001600160a01b03918216600090815260366020908152604080832093909416825291909152205490565b6102f16103bd366004612748565b6001600160a01b0316600090815260416020526040902054600160801b900461ffff1690565b6102f16103f1366004612748565b6111bb565b61041d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161026d565b603d5461010090046001600160a01b031661041d565b610260604051806040016040528060018152602001603160f81b81525081565b6102f1610479366004612748565b6001600160a01b03166000908152604160205260409020546001600160801b031690565b6102f16104ab366004612748565b6001600160a01b031660009081526034602052604090205490565b6102d46104d4366004612748565b611316565b6102606114f4565b6037546001600160a01b031661041d565b6102f1611503565b603e546001600160a01b031661041d565b61051e6105193660046128af565b61150e565b60408051921515835260208301919091520161026d565b6102f1600181565b6102d461054b36600461271c565b6115bb565b6102d461055e3660046129e1565b6115ca565b6102d4610571366004612748565b6117c9565b6102f1610284366004612876565b6102f1610592366004612748565b6001600160a01b0316600090815260386020526040902054600160801b90046001600160801b031690565b6102d46105cb366004612748565b611968565b603f546001600160a01b031661041d565b6102f17f323db0410fecc107e39e2af5908671f4c8d106123b35a51501bb805c5fa36aa081565b6102f1610616366004612ab6565b611ab9565b6040546001600160a01b031661041d565b6060603b805461063b90612aeb565b80601f016020809104026020016040519081016040528092919081815260200182805461066790612aeb565b80156106b45780601f10610689576101008083540402835291602001916106b4565b820191906000526020600020905b81548152906001019060200180831161069757829003601f168201915b5050505050905090565b6040805180820182526002815261038360f41b6020820152905162461bcd60e51b81526000916106f0916004016126da565b60405180910390fd5b60008061070583611b3c565b603a5491509150915091565b604080518082019091526002815261373760f01b60208201526001600160a01b0388166107515760405162461bcd60e51b81526004016106f091906126da565b50834211156040518060400160405280600281526020016106e760f31b8152509061078f5760405162461bcd60e51b81526004016106f091906126da565b506001600160a01b038716600090815260346020526040812054906107b2610c53565b604080517f323db0410fecc107e39e2af5908671f4c8d106123b35a51501bb805c5fa36aa060208201526001600160a01b038b1691810191909152606081018990526080810184905260a0810188905260c0016040516020818303038152906040528051906020012060405160200161084292919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa1580156108aa573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b03161460405180604001604052806002815260200161373960f01b815250906109015760405162461bcd60e51b81526004016106f091906126da565b5061090d826001612b3c565b6001600160a01b038a16600090815260346020526040902055610931898989611b60565b505050505050505050565b603e546001600160a01b0316331461098b5760405162461bcd60e51b815260206004820152601260248201527121a0a62622a92fa727aa2fa0afaa27a5a2a760711b60448201526064016106f0565b6001600160a01b0382166000908152604160205260409020546109c1906109bc9083906001600160801b0316612b54565b611bca565b6001600160a01b0392909216600090815260416020526040902080546001600160801b0319166001600160801b039093169290921790915550565b60375460405163386497fd60e01b81526001600160a01b039182166004820152600091610a9c917f00000000000000000000000000000000000000000000000000000000000000009091169063386497fd90602401602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190612b6b565b603a545b90611c37565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b259190612b84565b604051637be53ca160e01b81523360048201529091506001600160a01b03821690637be53ca190602401602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b909190612ba1565b604051806040016040528060018152602001603160f81b81525090610bc85760405162461bcd60e51b81526004016106f091906126da565b506001600160a01b038216610bef5760405162461bcd60e51b81526004016106f090612bc3565b603f80546001600160a01b038481166001600160a01b0319831681179093556040519116919082907f6b489e1dbfbe36f55c511c098bcc9d92fec7f04f74ceb75018697ab68f7d352990600090a3505050565b6000610c4d82611b3c565b92915050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610c84575060355490565b610a9c611c7b565b603f546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152601960248201527f43414c4c45525f4e4f545f444953434f554e545f544f4b454e0000000000000060448201526064016106f0565b836001600160a01b0316856001600160a01b03161415610d0557610fcd565b6000610d1086611b3c565b90506000610d1d86611b3c565b905081158015610d2b575080155b15610d37575050610fcd565b60375460405163386497fd60e01b81526001600160a01b0391821660048201526000917f0000000000000000000000000000000000000000000000000000000000000000169063386497fd90602401602060405180830381865afa158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc79190612b6b565b90506000808415610ecc576001600160a01b038a16600090815260416020526040902054610e04908b908790600160801b900461ffff1686611d24565b9092509050610e1b8a610e1683611bca565b611e45565b610e5f8a610e2c85610a968e611b3c565b610e36898c612b54565b6001600160a01b038e16600090815260416020526040902054600160801b900461ffff16611f3e565b6040518281526001600160a01b038b1690600090600080516020612cde8339815191529060200160405180910390a360408051838152602081018490529081018490526001600160a01b038b1690600090600080516020612cbe8339815191529060600160405180910390a35b8315610fc7576001600160a01b038916600090815260416020526040902054610f04908a908690600160801b900461ffff1686611d24565b9092509050610f1689610e1683611bca565b610f5a89610f2785610a968d611b3c565b610f31898b612b3c565b6001600160a01b038d16600090815260416020526040902054600160801b900461ffff16611f3e565b6040518281526001600160a01b038a1690600090600080516020612cde8339815191529060200160405180910390a360408051838152602081018490529081018490526001600160a01b038a1690600090600080516020612cbe8339815191529060600160405180910390a35b50505050505b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190612b84565b604051637be53ca160e01b81523360048201529091506001600160a01b03821690637be53ca190602401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190612ba1565b604051806040016040528060018152602001603160f81b815250906110fb5760405162461bcd60e51b81526004016106f091906126da565b50603e546001600160a01b03161561114a5760405162461bcd60e51b8152602060048201526012602482015271105513d2d15397d053149150511657d4d15560721b60448201526064016106f0565b6001600160a01b0382166111705760405162461bcd60e51b81526004016106f090612bc3565b603e80546001600160a01b0319166001600160a01b0384169081179091556040517f07cba78d3a9bb0cf2cb0e30140558e278b50a2ba6da2e13369a0d9113034548b90600090a25050565b6000806111c783611b3c565b9050806111d75750600092915050565b60375460405163386497fd60e01b81526001600160a01b0391821660048201526000917f0000000000000000000000000000000000000000000000000000000000000000169063386497fd90602401602060405180830381865afa158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112679190612b6b565b6001600160a01b038516600090815260386020526040812054919250600160801b9091046001600160801b03169061129f8484611c37565b9050818314156112b25795945050505050565b6001600160a01b038616600090815260416020526040902054600160801b900461ffff16801561130c5760006112e88685611c37565b6112f29084612b54565b90506112fe8183612039565b6113089084612b54565b9250505b5095945050505050565b60375460405163386497fd60e01b81526001600160a01b0391821660048201526000917f0000000000000000000000000000000000000000000000000000000000000000169063386497fd90602401602060405180830381865afa158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a69190612b6b565b905060006113b383611b3c565b6001600160a01b038416600090815260416020526040812054919250600160801b90910461ffff1690806113e986858588611d24565b915091506113fa86610e1683611bca565b6114808661140b87610a968a611b3c565b603f546040516370a0823160e01b81526001600160a01b038b81166004830152909116906370a08231906024015b602060405180830381865afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190612b6b565b86611f3e565b6040518281526001600160a01b03871690600090600080516020612cde8339815191529060200160405180910390a360408051838152602081018490529081018690526001600160a01b03871690600090600080516020612cbe8339815191529060600160405180910390a3505050505050565b6060603c805461063b90612aeb565b6000610a9c603a5490565b604080518082019091526002815261323360f01b60208201526000908190337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146115755760405162461bcd60e51b81526004016106f091906126da565b50846001600160a01b0316866001600160a01b03161461159a5761159a85878661205f565b6115a686868686612105565b6115ae611503565b9150915094509492505050565b6115c6338383611b60565b5050565b6001805460ff16806115db5750303b155b806115e7575060005481115b61164a5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b60648201526084016106f0565b60015460ff16158015611669576001805460ff19168117905560008290555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168a6001600160a01b03161460405180604001604052806002815260200161383760f01b815250906116d75760405162461bcd60e51b81526004016106f091906126da565b506116e1866122a3565b6116ea856122b6565b603d8054603780546001600160a01b038d81166001600160a01b0319909216919091179091558a16610100026001600160a81b031990911660ff8a1617179055611732611c7b565b6035819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316896001600160a01b03167f40251fbfb6656cfa65a00d7879029fec1fad21d28fdcff2f4f68f52795b74f2c8a8a8a8a8a8a6040516117a596959493929190612bf3565b60405180910390a38015610fc7576001805460ff1916905550505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d9190612b84565b604051637be53ca160e01b81523360048201529091506001600160a01b03821690637be53ca190602401602060405180830381865afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190612ba1565b604051806040016040528060018152602001603160f81b815250906118f05760405162461bcd60e51b81526004016106f091906126da565b506001600160a01b0382166119175760405162461bcd60e51b81526004016106f090612bc3565b604080546001600160a01b038481166001600160a01b031983168117845592519116919082907f194bd59f47b230edccccc2be58b92dde3a5dadd835751a621af59006928bccef90600090a3505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190612b84565b604051637be53ca160e01b81523360048201529091506001600160a01b03821690637be53ca190602401602060405180830381865afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a579190612ba1565b604051806040016040528060018152602001603160f81b81525090611a8f5760405162461bcd60e51b81526004016106f091906126da565b5050603d80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b604080518082019091526002815261323360f01b6020820152600090337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611b1e5760405162461bcd60e51b81526004016106f091906126da565b50611b2c84600085856122c9565b611b34611503565b949350505050565b6001600160a01b03166000908152603860205260409020546001600160801b031690565b6001600160a01b0383811660008181526036602090815260408083208786168085529083529281902086905560375490518681529416939192917fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1910160405180910390a4505050565b60006001600160801b03821115611c335760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016106f0565b5090565b600081156b019d971e4fe8401e740000001983900484111517611c5957600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611ca661250c565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b03841660009081526038602052604081205481908190611d5c908790600160801b90046001600160801b0316611c37565b611d668786611c37565b611d709190612b54565b905060008115801590611d8257508515155b15611daf576000611d938388612039565b9050611d9f8187612516565b9150611dab8184612b54565b9250505b611db885611bca565b6001600160a01b038916600090815260386020908152604080832080546001600160801b03958616600160801b029086161790556041909152902054611e03916109bc911684612b3c565b6001600160a01b0398909816600090815260416020526040902080546001600160801b0319166001600160801b03999099169890981790975596945050505050565b603a54611e5b6001600160801b03831682612b54565b603a556001600160a01b0383166000908152603860205260409020546001600160801b0316611e8a8382612c6a565b6001600160a01b03858116600090815260386020526040902080546001600160801b0319166001600160801b039390931692909217909155603d546101009004168015610fcd576040516318c39f1760e11b81526001600160a01b038681166004830152602482018590526001600160801b03841660448301528216906331873e2e90606401600060405180830381600087803b158015611f2a57600080fd5b505af1158015610931573d6000803e3d6000fd5b6040805490516393adbec560e01b815260048101859052602481018490526000916001600160a01b0316906393adbec590604401602060405180830381865afa158015611f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb39190612b6b565b9050808214610fcd57611fc581612555565b6001600160a01b038616600081815260416020908152604091829020805461ffff95909516600160801b0261ffff60801b19909516949094179093555184815283927f74ab9665e7c36c29ddb78ef88a3e2eac73d35b8b16de7bc573e313e320104956910160405180910390a35050505050565b60008115611388198390048411151761205157600080fd5b506127109102611388010490565b6001600160a01b038084166000908152603660209081526040808320938616835292905290812054612092908390612b54565b6001600160a01b03808616600081815260366020908152604080832089861680855292529182902085905560375491519495509216927fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1906120f79086815260200190565b60405180910390a450505050565b6000806121128484612516565b6040805180820190915260028152610c8d60f21b60208201529091508161214c5760405162461bcd60e51b81526004016106f091906126da565b50600061215886611b3c565b6001600160a01b038716600090815260416020526040812054919250600160801b90910461ffff16908061218e8985858a611d24565b91509150808511156121b5576121b0896121ab6109bc8489612b54565b6125b8565b6121c6565b6121c689610e166109bc8885612b54565b612209896121d789610a968d611b3c565b603f546040516370a0823160e01b81526001600160a01b038e81166004830152909116906370a0823190602401611439565b6000612215838a612b3c565b9050896001600160a01b031660006001600160a01b0316600080516020612cde8339815191528360405161224b91815260200190565b60405180910390a360408051828152602081018590529081018990526001600160a01b03808c1691908d1690600080516020612cbe8339815191529060600160405180910390a35060019a9950505050505050505050565b80516115c690603b9060208401906125fd565b80516115c690603c9060208401906125fd565b60006122d58383612516565b604080518082019091526002815261323560f01b60208201529091508161230f5760405162461bcd60e51b81526004016106f091906126da565b50600061231b866111bb565b9050600061232887611b3c565b6001600160a01b038816600090815260416020526040812054919250600160801b90910461ffff16908061235e8a85858a611d24565b915091508488141561237c576123778a610e1686611bca565b61238d565b61238d8a610e166109bc848a612b3c565b6123d08a61239e89610a968e611b3c565b603f546040516370a0823160e01b81526001600160a01b038f81166004830152909116906370a0823190602401611439565b878211156124645760006123e48984612b54565b90508a6001600160a01b031660006001600160a01b0316600080516020612cde8339815191528360405161241a91815260200190565b60405180910390a360408051828152602081018590529081018990526001600160a01b038c16908190600080516020612cbe8339815191529060600160405180910390a350610fc7565b6000612470838a612b54565b905060006001600160a01b03168b6001600160a01b0316600080516020612cde833981519152836040516124a691815260200190565b60405180910390a360408051828152602081018590529081018990526001600160a01b03808c1691908d16907f4cf25bc1d991c17529c25213d3cc0cda295eeaad5f13f361969b12ea48015f909060600160405180910390a35050505050505050505050565b6060610a9c61062c565b600081156b033b2e3c9fd0803ce80000006002840419048411171561253a57600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b600061ffff821115611c335760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b60648201526084016106f0565b603a546125ce6001600160801b03831682612b3c565b603a556001600160a01b0383166000908152603860205260409020546001600160801b0316611e8a8382612c92565b82805461260990612aeb565b90600052602060002090601f01602090048101928261262b5760008555612671565b82601f1061264457805160ff1916838001178555612671565b82800160010185558215612671579182015b82811115612671578251825591602001919060010190612656565b50611c339291505b80821115611c335760008155600101612679565b6000815180845260005b818110156126b357602081850181015186830182015201612697565b818111156126c5576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006126ed602083018461268d565b9392505050565b6001600160a01b038116811461270957600080fd5b50565b8035612717816126f4565b919050565b6000806040838503121561272f57600080fd5b823561273a816126f4565b946020939093013593505050565b60006020828403121561275a57600080fd5b81356126ed816126f4565b803560ff8116811461271757600080fd5b600080600080600080600060e0888a03121561279157600080fd5b873561279c816126f4565b965060208801356127ac816126f4565b955060408801359450606088013593506127c860808901612765565b925060a0880135915060c0880135905092959891949750929550565b6000806000606084860312156127f957600080fd5b8335612804816126f4565b92506020840135612814816126f4565b929592945050506040919091013590565b600080600080600060a0868803121561283d57600080fd5b8535612848816126f4565b94506020860135612858816126f4565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561288957600080fd5b8235612894816126f4565b915060208301356128a4816126f4565b809150509250929050565b600080600080608085870312156128c557600080fd5b84356128d0816126f4565b935060208501356128e0816126f4565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261291c57600080fd5b813567ffffffffffffffff80821115612937576129376128f5565b604051601f8301601f19908116603f0116810190828211818310171561295f5761295f6128f5565b8160405283815286602085880101111561297857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f8401126129aa57600080fd5b50813567ffffffffffffffff8111156129c257600080fd5b6020830191508360208285010111156129da57600080fd5b9250929050565b60008060008060008060008060e0898b0312156129fd57600080fd5b8835612a08816126f4565b97506020890135612a18816126f4565b9650612a2660408a0161270c565b9550612a3460608a01612765565b9450608089013567ffffffffffffffff80821115612a5157600080fd5b612a5d8c838d0161290b565b955060a08b0135915080821115612a7357600080fd5b612a7f8c838d0161290b565b945060c08b0135915080821115612a9557600080fd5b50612aa28b828c01612998565b999c989b5096995094979396929594505050565b600080600060608486031215612acb57600080fd5b8335612ad6816126f4565b95602085013595506040909401359392505050565b600181811c90821680612aff57607f821691505b60208210811415612b2057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612b4f57612b4f612b26565b500190565b600082821015612b6657612b66612b26565b500390565b600060208284031215612b7d57600080fd5b5051919050565b600060208284031215612b9657600080fd5b81516126ed816126f4565b600060208284031215612bb357600080fd5b815180151581146126ed57600080fd5b60208082526016908201527516915493d7d05111149154d4d7d393d517d59053125160521b604082015260600190565b6001600160a01b038716815260ff8616602082015260a060408201819052600090612c209083018761268d565b8281036060840152612c32818761268d565b90508281036080840152838152838560208301376000602085830101526020601f19601f860116820101915050979650505050505050565b60006001600160801b0383811690831681811015612c8a57612c8a612b26565b039392505050565b60006001600160801b03808316818516808303821115612cb457612cb4612b26565b0194935050505056fe458f5fa412d0f69b08dd84872b0215675cc67bc1d5b6fd93300a1c3878b86196ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220546ca27176ce3f3f569a7337abbbe91281c875ce6ec2f3868deb28f2b34a64cf64736f6c634300080a0033",
  "devdoc": {
    "author": "Aave",
    "details": "Transfer and approve functionalities are disabled since its a non-transferable token",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Return cached value if chainId matches cache, otherwise recomputes separator",
        "returns": {
          "_0": "The domain separator of the token at current chain"
        }
      },
      "UNDERLYING_ASSET_ADDRESS()": {
        "returns": {
          "_0": "The address of the underlying asset"
        }
      },
      "approveDelegation(address,uint256)": {
        "params": {
          "amount": "The maximum amount being delegated.",
          "delegatee": "The address receiving the delegated borrowing power"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "borrowAllowance(address,address)": {
        "params": {
          "fromUser": "The user to giving allowance",
          "toUser": "The user to give allowance to"
        },
        "returns": {
          "_0": "The current allowance of `toUser`"
        }
      },
      "burn(address,uint256,uint256)": {
        "details": "In some instances, a burn transaction will emit a mint event if the amount to burn is less than the interest that the user accrued",
        "params": {
          "amount": "The amount getting burned",
          "from": "The address from which the debt will be burned",
          "index": "The variable debt index of the reserve"
        },
        "returns": {
          "_0": "The scaled total debt of the reserve"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "pool": "The address of the Pool contract"
        }
      },
      "decreaseBalanceFromInterest(address,uint256)": {
        "details": "Decrease the amount of interests accumulated by the user",
        "params": {
          "amount": "The value to be decrease",
          "user": "The address of the user"
        }
      },
      "delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The deadline timestamp, type(uint256).max for max deadline",
          "delegatee": "The delegatee that can use the credit",
          "delegator": "The delegator of the credit",
          "r": "The R signature param",
          "s": "The S signature param",
          "v": "The V signature param",
          "value": "The amount to be delegated"
        }
      },
      "getAToken()": {
        "returns": {
          "_0": "The address of the GhoAToken contract"
        }
      },
      "getDiscountPercent(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The discount percent (expressed in bps)"
        }
      },
      "getDiscountRateStrategy()": {
        "returns": {
          "_0": "The address of DiscountRateStrategy contract"
        }
      },
      "getDiscountToken()": {
        "returns": {
          "_0": "address The address of DiscountToken"
        }
      },
      "getIncentivesController()": {
        "returns": {
          "_0": "The address of the Incentives Controller"
        }
      },
      "getPreviousIndex(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The last index interest was accrued to the user's balance, expressed in ray"
        }
      },
      "getScaledUserBalanceAndSupply(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The scaled balance of the user",
          "_1": "The scaled total supply"
        }
      },
      "initialize(address,address,address,uint8,string,string,bytes)": {
        "params": {
          "debtTokenDecimals": "The decimals of the debtToken, same as the underlying asset's",
          "debtTokenName": "The name of the token",
          "debtTokenSymbol": "The symbol of the token",
          "incentivesController": "The smart contract managing potential incentives distribution",
          "params": "A set of encoded parameters for additional initialization",
          "pool": "The pool contract that is initializing this contract",
          "underlyingAsset": "The address of the underlying asset of this aToken (E.g. WETH for aWETH)"
        }
      },
      "mint(address,address,uint256,uint256)": {
        "params": {
          "amount": "The amount of debt being minted",
          "index": "The variable debt index of the reserve",
          "onBehalfOf": "The address receiving the debt tokens",
          "user": "The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise"
        },
        "returns": {
          "_0": "True if the previous balance of the user is 0, false otherwise",
          "_1": "The scaled total debt of the reserve"
        }
      },
      "nonces(address)": {
        "params": {
          "owner": "The address for which the nonce is being returned"
        },
        "returns": {
          "_0": "The nonce value for the input address`"
        }
      },
      "rebalanceUserDiscountPercent(address)": {
        "params": {
          "user": "The address of the user"
        }
      },
      "scaledBalanceOf(address)": {
        "details": "The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index at the moment of the update",
        "params": {
          "user": "The user whose balance is calculated"
        },
        "returns": {
          "_0": "The scaled balance of the user"
        }
      },
      "scaledTotalSupply()": {
        "returns": {
          "_0": "The scaled total supply"
        }
      },
      "setAToken(address)": {
        "params": {
          "ghoAToken": "The address of the GhoAToken contract"
        }
      },
      "setIncentivesController(address)": {
        "params": {
          "controller": "the new Incentives controller"
        }
      },
      "totalSupply()": {
        "details": "It does not account for active discounts of the users. The discount is deducted from the user's debt at repayment / liquidation time, so this function does always return a greater or equal value than the actual total supply.",
        "returns": {
          "_0": "The amount of tokens in existence (without accounting for active discounts on debt)"
        }
      },
      "transfer(address,uint256)": {
        "details": "Being non transferrable, the debt token does not implement any of the standard ERC20 functions for transfer and allowance."
      },
      "updateDiscountDistribution(address,address,uint256,uint256,uint256)": {
        "details": "To be executed before the token transfer happens",
        "params": {
          "amount": "The amount of discount token being transferred",
          "recipient": "The address of recipient",
          "recipientDiscountTokenBalance": "The recipient discount token balance",
          "sender": "The address of sender",
          "senderDiscountTokenBalance": "The sender discount token balance"
        }
      },
      "updateDiscountRateStrategy(address)": {
        "params": {
          "newDiscountRateStrategy": "The address of DiscountRateStrategy contract"
        }
      },
      "updateDiscountToken(address)": {
        "params": {
          "newDiscountToken": "The address of the DiscountToken contract"
        }
      }
    },
    "title": "GhoVariableDebtToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Get the domain separator for the token"
      },
      "UNDERLYING_ASSET_ADDRESS()": {
        "notice": "Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)"
      },
      "approveDelegation(address,uint256)": {
        "notice": "Delegates borrowing power to a user on the specific debt token. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)"
      },
      "borrowAllowance(address,address)": {
        "notice": "Returns the borrow allowance of the user"
      },
      "burn(address,uint256,uint256)": {
        "notice": "Burns user variable debt"
      },
      "delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates borrowing power to a user on the specific debt token via ERC712 signature"
      },
      "getAToken()": {
        "notice": "Returns the address of the GHO AToken"
      },
      "getDiscountPercent(address)": {
        "notice": "Returns the discount percent being applied to the debt interest of the user"
      },
      "getDiscountRateStrategy()": {
        "notice": "Returns the address of the Discount Rate Strategy"
      },
      "getDiscountToken()": {
        "notice": "Returns the address of the Discount Token"
      },
      "getIncentivesController()": {
        "notice": "Returns the address of the Incentives Controller contract"
      },
      "getPreviousIndex(address)": {
        "notice": "Returns last index interest was accrued to the user's balance"
      },
      "getScaledUserBalanceAndSupply(address)": {
        "notice": "Returns the scaled balance of the user and the scaled total supply."
      },
      "initialize(address,address,address,uint8,string,string,bytes)": {
        "notice": "Initializes the debt token."
      },
      "mint(address,address,uint256,uint256)": {
        "notice": "Mints debt token to the `onBehalfOf` address"
      },
      "nonces(address)": {
        "notice": "Returns the nonce value for address specified as parameter"
      },
      "rebalanceUserDiscountPercent(address)": {
        "notice": "Rebalances the discount percent of a user"
      },
      "scaledBalanceOf(address)": {
        "notice": "Returns the scaled balance of the user."
      },
      "scaledTotalSupply()": {
        "notice": "Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)"
      },
      "setAToken(address)": {
        "notice": "Sets a reference to the GHO AToken"
      },
      "setIncentivesController(address)": {
        "notice": "Sets a new Incentives Controller"
      },
      "totalSupply()": {
        "notice": "Returns the amount of tokens in existence."
      },
      "updateDiscountDistribution(address,address,uint256,uint256,uint256)": {
        "notice": "Updates the discount percents of the users when a discount token transfer occurs"
      },
      "updateDiscountRateStrategy(address)": {
        "notice": "Updates the Discount Rate Strategy"
      },
      "updateDiscountToken(address)": {
        "notice": "Updates the Discount Token"
      }
    },
    "notice": "Implements a variable debt token to track the borrowing positions of users at variable rate mode for GHO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4441,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4444,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4514,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17815,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17817,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_domainSeparator",
        "offset": 0,
        "slot": "53",
        "type": "t_bytes32"
      },
      {
        "astId": 17592,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_borrowAllowances",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 17599,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_underlyingAsset",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 17981,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_userState",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_struct(UserState)17976_storage)"
      },
      {
        "astId": 17987,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 17989,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 17991,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_name",
        "offset": 0,
        "slot": "59",
        "type": "t_string_storage"
      },
      {
        "astId": 17993,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "60",
        "type": "t_string_storage"
      },
      {
        "astId": 17995,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "61",
        "type": "t_uint8"
      },
      {
        "astId": 17998,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_incentivesController",
        "offset": 1,
        "slot": "61",
        "type": "t_contract(IAaveIncentivesController)2499"
      },
      {
        "astId": 73223,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_ghoAToken",
        "offset": 0,
        "slot": "62",
        "type": "t_address"
      },
      {
        "astId": 73226,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_discountToken",
        "offset": 0,
        "slot": "63",
        "type": "t_contract(IERC20)745"
      },
      {
        "astId": 73229,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_discountRateStrategy",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(IGhoDiscountRateStrategy)71882"
      },
      {
        "astId": 73239,
        "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
        "label": "_ghoUserState",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_address,t_struct(GhoUserState)73234_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAaveIncentivesController)2499": {
        "encoding": "inplace",
        "label": "contract IAaveIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)745": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGhoDiscountRateStrategy)71882": {
        "encoding": "inplace",
        "label": "contract IGhoDiscountRateStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(GhoUserState)73234_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GhoVariableDebtToken.GhoUserState)",
        "numberOfBytes": "32",
        "value": "t_struct(GhoUserState)73234_storage"
      },
      "t_mapping(t_address,t_struct(UserState)17976_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IncentivizedERC20.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)17976_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GhoUserState)73234_storage": {
        "encoding": "inplace",
        "label": "struct GhoVariableDebtToken.GhoUserState",
        "members": [
          {
            "astId": 73231,
            "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
            "label": "accumulatedDebtInterest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 73233,
            "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
            "label": "discountPercent",
            "offset": 16,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserState)17976_storage": {
        "encoding": "inplace",
        "label": "struct IncentivizedERC20.UserState",
        "members": [
          {
            "astId": 17973,
            "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 17975,
            "contract": "src/contracts/facilitators/aave/tokens/GhoVariableDebtToken.sol:GhoVariableDebtToken",
            "label": "additionalData",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}